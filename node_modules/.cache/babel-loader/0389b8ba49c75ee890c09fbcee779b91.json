{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.GraphQLString = exports.GraphQLInt = exports.GraphQLID = exports.GraphQLFloat = exports.GraphQLBoolean = exports.GRAPHQL_MIN_INT = exports.GRAPHQL_MAX_INT = void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('./definition.js');\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\n\nconst GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nconst GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nconst GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _inspect.inspect)(coercedValue)}`);\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.inspect)(coercedValue));\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _inspect.inspect)(inputValue)}`);\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(`Int cannot represent non-integer value: ${(0, _printer.print)(valueNode)}`, {\n        nodes: valueNode\n      });\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`, {\n        nodes: valueNode\n      });\n    }\n\n    return num;\n  }\n\n});\nexports.GraphQLInt = GraphQLInt;\nconst GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _inspect.inspect)(coercedValue)}`);\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _inspect.inspect)(inputValue)}`);\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(`Float cannot represent non numeric value: ${(0, _printer.print)(valueNode)}`, valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n\n});\nexports.GraphQLFloat = GraphQLFloat;\nconst GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(`String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`);\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0, _inspect.inspect)(inputValue)}`);\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(`String cannot represent a non string value: ${(0, _printer.print)(valueNode)}`, {\n        nodes: valueNode\n      });\n    }\n\n    return valueNode.value;\n  }\n\n});\nexports.GraphQLString = GraphQLString;\nconst GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(coercedValue)}`);\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(inputValue)}`);\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(`Boolean cannot represent a non boolean value: ${(0, _printer.print)(valueNode)}`, {\n        nodes: valueNode\n      });\n    }\n\n    return valueNode.value;\n  }\n\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nconst GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`);\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(`ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), {\n        nodes: valueNode\n      });\n    }\n\n    return valueNode.value;\n  }\n\n});\nexports.GraphQLID = GraphQLID;\nconst specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(_ref => {\n    let {\n      name\n    } = _ref;\n    return type.name === name;\n  });\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/type/scalars.js"],"names":["Object","defineProperty","exports","value","GraphQLString","GraphQLInt","GraphQLID","GraphQLFloat","GraphQLBoolean","GRAPHQL_MIN_INT","GRAPHQL_MAX_INT","isSpecifiedScalarType","specifiedScalarTypes","_inspect","require","_isObjectLike","_GraphQLError","_kinds","_printer","_definition","GraphQLScalarType","name","description","serialize","outputValue","coercedValue","serializeObject","num","Number","isInteger","GraphQLError","inspect","parseValue","inputValue","parseLiteral","valueNode","kind","Kind","INT","print","nodes","parseInt","isFinite","FLOAT","parseFloat","toString","STRING","BOOLEAN","String","freeze","type","some","isObjectLike","valueOf","valueOfResult","toJSON"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLString =\n  exports.GraphQLInt =\n  exports.GraphQLID =\n  exports.GraphQLFloat =\n  exports.GraphQLBoolean =\n  exports.GRAPHQL_MIN_INT =\n  exports.GRAPHQL_MAX_INT =\n    void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('./definition.js');\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nconst GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nconst GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nconst GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          (0, _inspect.inspect)(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexports.GraphQLInt = GraphQLInt;\nconst GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.FLOAT &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexports.GraphQLFloat = GraphQLFloat;\nconst GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLString = GraphQLString;\nconst GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n        coercedValue,\n      )}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nconst GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`,\n    );\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.STRING &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          (0, _printer.print)(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLID = GraphQLID;\nconst specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n"]},"metadata":{},"sourceType":"script"}