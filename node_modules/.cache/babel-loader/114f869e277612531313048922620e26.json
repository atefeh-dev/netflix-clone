{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.introspectionFromSchema = introspectionFromSchema;\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _execute = require('../execution/execute.js');\n\nvar _getIntrospectionQuery = require('./getIntrospectionQuery.js');\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\n\nfunction introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    ...options\n  };\n  const document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));\n  const result = (0, _execute.executeSync)({\n    schema,\n    document\n  });\n  !result.errors && result.data || (0, _invariant.invariant)(false);\n  return result.data;\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/utilities/introspectionFromSchema.js"],"names":["Object","defineProperty","exports","value","introspectionFromSchema","_invariant","require","_parser","_execute","_getIntrospectionQuery","schema","options","optionsWithDefaults","specifiedByUrl","directiveIsRepeatable","schemaDescription","inputValueDeprecation","document","parse","getIntrospectionQuery","result","executeSync","errors","data","invariant"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,yBAAD,CAAtB;;AAEA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,4BAAD,CAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,uBAAT,CAAiCM,MAAjC,EAAyCC,OAAzC,EAAkD;AAChD,QAAMC,mBAAmB,GAAG;AAC1BC,IAAAA,cAAc,EAAE,IADU;AAE1BC,IAAAA,qBAAqB,EAAE,IAFG;AAG1BC,IAAAA,iBAAiB,EAAE,IAHO;AAI1BC,IAAAA,qBAAqB,EAAE,IAJG;AAK1B,OAAGL;AALuB,GAA5B;AAOA,QAAMM,QAAQ,GAAG,CAAC,GAAGV,OAAO,CAACW,KAAZ,EACf,CAAC,GAAGT,sBAAsB,CAACU,qBAA3B,EAAkDP,mBAAlD,CADe,CAAjB;AAGA,QAAMQ,MAAM,GAAG,CAAC,GAAGZ,QAAQ,CAACa,WAAb,EAA0B;AACvCX,IAAAA,MADuC;AAEvCO,IAAAA;AAFuC,GAA1B,CAAf;AAIC,GAACG,MAAM,CAACE,MAAR,IAAkBF,MAAM,CAACG,IAA1B,IAAmC,CAAC,GAAGlB,UAAU,CAACmB,SAAf,EAA0B,KAA1B,CAAnC;AACA,SAAOJ,MAAM,CAACG,IAAd;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.introspectionFromSchema = introspectionFromSchema;\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _parser = require('../language/parser.js');\n\nvar _execute = require('../execution/execute.js');\n\nvar _getIntrospectionQuery = require('./getIntrospectionQuery.js');\n\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\nfunction introspectionFromSchema(schema, options) {\n  const optionsWithDefaults = {\n    specifiedByUrl: true,\n    directiveIsRepeatable: true,\n    schemaDescription: true,\n    inputValueDeprecation: true,\n    ...options,\n  };\n  const document = (0, _parser.parse)(\n    (0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults),\n  );\n  const result = (0, _execute.executeSync)({\n    schema,\n    document,\n  });\n  (!result.errors && result.data) || (0, _invariant.invariant)(false);\n  return result.data;\n}\n"]},"metadata":{},"sourceType":"script"}