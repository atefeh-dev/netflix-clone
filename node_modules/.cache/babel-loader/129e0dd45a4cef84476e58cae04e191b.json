{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.ScalarLeafsRule = ScalarLeafsRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\n\nfunction ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = (0, _inspect.inspect)(type);\n            context.reportError(new _GraphQLError.GraphQLError(`Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`, {\n              nodes: selectionSet\n            }));\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = (0, _inspect.inspect)(type);\n          context.reportError(new _GraphQLError.GraphQLError(`Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`, {\n            nodes: node\n          }));\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/ScalarLeafsRule.js"],"names":["Object","defineProperty","exports","value","ScalarLeafsRule","_inspect","require","_GraphQLError","_definition","context","Field","node","type","getType","selectionSet","isLeafType","getNamedType","fieldName","name","typeStr","inspect","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,0BAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,eAAT,CAAyBK,OAAzB,EAAkC;AAChC,SAAO;AACLC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,YAAMC,IAAI,GAAGH,OAAO,CAACI,OAAR,EAAb;AACA,YAAMC,YAAY,GAAGH,IAAI,CAACG,YAA1B;;AAEA,UAAIF,IAAJ,EAAU;AACR,YAAI,CAAC,GAAGJ,WAAW,CAACO,UAAhB,EAA4B,CAAC,GAAGP,WAAW,CAACQ,YAAhB,EAA8BJ,IAA9B,CAA5B,CAAJ,EAAsE;AACpE,cAAIE,YAAJ,EAAkB;AAChB,kBAAMG,SAAS,GAAGN,IAAI,CAACO,IAAL,CAAUf,KAA5B;AACA,kBAAMgB,OAAO,GAAG,CAAC,GAAGd,QAAQ,CAACe,OAAb,EAAsBR,IAAtB,CAAhB;AACAH,YAAAA,OAAO,CAACY,WAAR,CACE,IAAId,aAAa,CAACe,YAAlB,CACG,UAASL,SAAU,2CAA0CE,OAAQ,qBADxE,EAEE;AACEI,cAAAA,KAAK,EAAET;AADT,aAFF,CADF;AAQD;AACF,SAbD,MAaO,IAAI,CAACA,YAAL,EAAmB;AACxB,gBAAMG,SAAS,GAAGN,IAAI,CAACO,IAAL,CAAUf,KAA5B;AACA,gBAAMgB,OAAO,GAAG,CAAC,GAAGd,QAAQ,CAACe,OAAb,EAAsBR,IAAtB,CAAhB;AACAH,UAAAA,OAAO,CAACY,WAAR,CACE,IAAId,aAAa,CAACe,YAAlB,CACG,UAASL,SAAU,cAAaE,OAAQ,uDAAsDF,SAAU,YAD3G,EAEE;AACEM,YAAAA,KAAK,EAAEZ;AADT,WAFF,CADF;AAQD;AACF;AACF;;AAhCI,GAAP;AAkCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.ScalarLeafsRule = ScalarLeafsRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nfunction ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if ((0, _definition.isLeafType)((0, _definition.getNamedType)(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = (0, _inspect.inspect)(type);\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = (0, _inspect.inspect)(type);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}