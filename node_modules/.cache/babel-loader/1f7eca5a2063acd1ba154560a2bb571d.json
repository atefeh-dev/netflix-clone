{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\n\n\nfunction NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new _GraphQLError.GraphQLError(operation.name ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".` : `Variable \"$${varName}\" is not defined.`, {\n              nodes: [node, operation]\n            }));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.js"],"names":["Object","defineProperty","exports","value","NoUndefinedVariablesRule","_GraphQLError","require","context","variableNameDefined","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","reportError","GraphQLError","nodes","VariableDefinition","variable"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCG,OAAlC,EAA2C;AACzC,MAAIC,mBAAmB,GAAGR,MAAM,CAACS,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,GAAG;AACNH,QAAAA,mBAAmB,GAAGR,MAAM,CAACS,MAAP,CAAc,IAAd,CAAtB;AACD,OAHkB;;AAKnBG,MAAAA,KAAK,CAACC,SAAD,EAAY;AACf,cAAMC,MAAM,GAAGP,OAAO,CAACQ,0BAAR,CAAmCF,SAAnC,CAAf;;AAEA,aAAK,MAAM;AAAEG,UAAAA;AAAF,SAAX,IAAuBF,MAAvB,EAA+B;AAC7B,gBAAMG,OAAO,GAAGD,IAAI,CAACE,IAAL,CAAUf,KAA1B;;AAEA,cAAIK,mBAAmB,CAACS,OAAD,CAAnB,KAAiC,IAArC,EAA2C;AACzCV,YAAAA,OAAO,CAACY,WAAR,CACE,IAAId,aAAa,CAACe,YAAlB,CACEP,SAAS,CAACK,IAAV,GACK,cAAaD,OAAQ,kCAAiCJ,SAAS,CAACK,IAAV,CAAef,KAAM,IADhF,GAEK,cAAac,OAAQ,mBAH5B,EAIE;AACEI,cAAAA,KAAK,EAAE,CAACL,IAAD,EAAOH,SAAP;AADT,aAJF,CADF;AAUD;AACF;AACF;;AAxBkB,KADhB;;AA4BLS,IAAAA,kBAAkB,CAACN,IAAD,EAAO;AACvBR,MAAAA,mBAAmB,CAACQ,IAAI,CAACO,QAAL,CAAcL,IAAd,CAAmBf,KAApB,CAAnB,GAAgD,IAAhD;AACD;;AA9BI,GAAP;AAgCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUndefinedVariablesRule = NoUndefinedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nfunction NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}