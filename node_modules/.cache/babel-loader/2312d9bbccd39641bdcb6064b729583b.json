{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\n\n\nfunction UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (schema !== null && schema !== void 0 && schema.getDirective(directiveName)) {\n        context.reportError(new _GraphQLError.GraphQLError(`Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`, {\n          nodes: node.name\n        }));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new _GraphQLError.GraphQLError(`There can be only one directive named \"@${directiveName}\".`, {\n          nodes: [knownDirectiveNames[directiveName], node.name]\n        }));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueDirectiveNamesRule","_GraphQLError","require","context","knownDirectiveNames","create","schema","getSchema","DirectiveDefinition","node","directiveName","name","getDirective","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCG,OAAlC,EAA2C;AACzC,QAAMC,mBAAmB,GAAGR,MAAM,CAACS,MAAP,CAAc,IAAd,CAA5B;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,SAAO;AACLC,IAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,YAAMC,aAAa,GAAGD,IAAI,CAACE,IAAL,CAAUZ,KAAhC;;AAEA,UACEO,MAAM,KAAK,IAAX,IACAA,MAAM,KAAK,KAAK,CADhB,IAEAA,MAAM,CAACM,YAAP,CAAoBF,aAApB,CAHF,EAIE;AACAP,QAAAA,OAAO,CAACU,WAAR,CACE,IAAIZ,aAAa,CAACa,YAAlB,CACG,eAAcJ,aAAc,yDAD/B,EAEE;AACEK,UAAAA,KAAK,EAAEN,IAAI,CAACE;AADd,SAFF,CADF;AAQA;AACD;;AAED,UAAIP,mBAAmB,CAACM,aAAD,CAAvB,EAAwC;AACtCP,QAAAA,OAAO,CAACU,WAAR,CACE,IAAIZ,aAAa,CAACa,YAAlB,CACG,2CAA0CJ,aAAc,IAD3D,EAEE;AACEK,UAAAA,KAAK,EAAE,CAACX,mBAAmB,CAACM,aAAD,CAApB,EAAqCD,IAAI,CAACE,IAA1C;AADT,SAFF,CADF;AAQD,OATD,MASO;AACLP,QAAAA,mBAAmB,CAACM,aAAD,CAAnB,GAAqCD,IAAI,CAACE,IAA1C;AACD;;AAED,aAAO,KAAP;AACD;;AAlCI,GAAP;AAoCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueDirectiveNamesRule = UniqueDirectiveNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nfunction UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}