{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isAsyncIterable = require('../jsutils/isAsyncIterable.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _locatedError = require('../error/locatedError.js');\n\nvar _collectFields = require('./collectFields.js');\n\nvar _execute = require('./execute.js');\n\nvar _mapAsyncIterator = require('./mapAsyncIterator.js');\n\nvar _values = require('./values.js');\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\n\nasync function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver\n  } = args;\n  const resultOrStream = await createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n  if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n\n  const mapSourceToResponse = payload => (0, _execute.execute)({\n    schema,\n    document,\n    rootValue: payload,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver\n  }); // Map every source value to a ExecutionResult value as described above.\n\n\n  return (0, _mapAsyncIterator.mapAsyncIterator)(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nasync function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = (0, _execute.buildExecutionContext)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + `Received: ${(0, _inspect.inspect)(eventStream)}.`);\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof _GraphQLError.GraphQLError) {\n      return {\n        errors: [error]\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const {\n    schema,\n    fragments,\n    operation,\n    variableValues,\n    rootValue\n  } = exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError('Schema is not configured to execute subscription operation.', {\n      nodes: operation\n    });\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new _GraphQLError.GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n      nodes: fieldNodes\n    });\n  }\n\n  const path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n  const info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, rootType, path);\n\n  try {\n    var _fieldDef$subscribe; // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n\n\n    const args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/execution/subscribe.js"],"names":["Object","defineProperty","exports","value","createSourceEventStream","subscribe","_devAssert","require","_inspect","_isAsyncIterable","_Path","_GraphQLError","_locatedError","_collectFields","_execute","_mapAsyncIterator","_values","args","arguments","length","devAssert","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","resultOrStream","isAsyncIterable","mapSourceToResponse","payload","execute","mapAsyncIterator","assertValidExecutionArguments","exeContext","buildExecutionContext","errors","eventStream","executeSubscription","Error","inspect","error","GraphQLError","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","collectFields","selectionSet","responseName","fieldNodes","entries","fieldDef","getFieldDef","fieldName","name","path","addPath","undefined","info","buildResolveInfo","_fieldDef$subscribe","getArgumentValues","resolveFn","locatedError","pathToArray"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isAsyncIterable = require('../jsutils/isAsyncIterable.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _locatedError = require('../error/locatedError.js');\n\nvar _collectFields = require('./collectFields.js');\n\nvar _execute = require('./execute.js');\n\nvar _mapAsyncIterator = require('./mapAsyncIterator.js');\n\nvar _values = require('./values.js');\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\nasync function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    (0, _execute.execute)({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return (0, _mapAsyncIterator.mapAsyncIterator)(\n    resultOrStream,\n    mapSourceToResponse,\n  );\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nasync function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = (0, _execute.buildExecutionContext)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${(0, _inspect.inspect)(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof _GraphQLError.GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new _GraphQLError.GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n  const info = (0, _execute.buildResolveInfo)(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = (0, _values.getArgumentValues)(\n      fieldDef,\n      fieldNodes[0],\n      variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw (0, _locatedError.locatedError)(\n      error,\n      fieldNodes,\n      (0, _Path.pathToArray)(path),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}