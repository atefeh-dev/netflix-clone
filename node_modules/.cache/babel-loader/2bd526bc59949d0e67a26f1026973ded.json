{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeComparators = require('../../utilities/typeComparators.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\n\n\nfunction VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node,\n          type,\n          defaultValue\n        } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              const varTypeStr = (0, _inspect.inspect)(varType);\n              const typeStr = (0, _inspect.inspect)(type);\n              context.reportError(new _GraphQLError.GraphQLError(`Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`, {\n                nodes: [varDef, node]\n              }));\n            }\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if ((0, _definition.isNonNullType)(locationType) && !(0, _definition.isNonNullType)(varType)) {\n    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, nullableLocationType);\n  }\n\n  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.js"],"names":["Object","defineProperty","exports","value","VariablesInAllowedPositionRule","_inspect","require","_GraphQLError","_kinds","_definition","_typeComparators","_typeFromAST","context","varDefMap","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","type","defaultValue","varName","name","varDef","schema","getSchema","varType","typeFromAST","allowedVariableUsage","varTypeStr","inspect","typeStr","reportError","GraphQLError","nodes","VariableDefinition","variable","varDefaultValue","locationType","locationDefaultValue","isNonNullType","hasNonNullVariableDefaultValue","kind","Kind","NULL","hasLocationDefaultValue","undefined","nullableLocationType","ofType","isTypeSubTypeOf"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.VariablesInAllowedPositionRule = VariablesInAllowedPositionRule;\n\nvar _inspect = require('../../jsutils/inspect.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeComparators = require('../../utilities/typeComparators.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nfunction VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = (0, _typeFromAST.typeFromAST)(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = (0, _inspect.inspect)(varType);\n              const typeStr = (0, _inspect.inspect)(type);\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (\n    (0, _definition.isNonNullType)(locationType) &&\n    !(0, _definition.isNonNullType)(varType)\n  ) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== _kinds.Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return (0, _typeComparators.isTypeSubTypeOf)(\n      schema,\n      varType,\n      nullableLocationType,\n    );\n  }\n\n  return (0, _typeComparators.isTypeSubTypeOf)(schema, varType, locationType);\n}\n"]},"metadata":{},"sourceType":"script"}