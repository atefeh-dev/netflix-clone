{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _collectFields = require('../../execution/collectFields.js');\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\n\n\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = (0, _collectFields.collectFields)(schema, fragments, variableValues, subscriptionType, node.selectionSet);\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription \"${operationName}\" must select only one top level field.` : 'Anonymous Subscription must select only one top level field.', {\n              nodes: extraFieldSelections\n            }));\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(new _GraphQLError.GraphQLError(operationName != null ? `Subscription \"${operationName}\" must not select an introspection top level field.` : 'Anonymous Subscription must not select an introspection top level field.', {\n                nodes: fieldNodes\n              }));\n            }\n          }\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.js"],"names":["Object","defineProperty","exports","value","SingleFieldSubscriptionsRule","_GraphQLError","require","_kinds","_collectFields","context","OperationDefinition","node","operation","schema","getSchema","subscriptionType","getSubscriptionType","operationName","name","variableValues","create","document","getDocument","fragments","definition","definitions","kind","Kind","FRAGMENT_DEFINITION","fields","collectFields","selectionSet","size","fieldSelectionLists","values","extraFieldSelectionLists","slice","extraFieldSelections","flat","reportError","GraphQLError","nodes","fieldNodes","field","fieldName","startsWith"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,yBAAD,CAApB;;AAEA,IAAIE,cAAc,GAAGF,OAAO,CAAC,kCAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,4BAAT,CAAsCK,OAAtC,EAA+C;AAC7C,SAAO;AACLC,IAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,UAAIA,IAAI,CAACC,SAAL,KAAmB,cAAvB,EAAuC;AACrC,cAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;AACA,cAAMC,gBAAgB,GAAGF,MAAM,CAACG,mBAAP,EAAzB;;AAEA,YAAID,gBAAJ,EAAsB;AACpB,gBAAME,aAAa,GAAGN,IAAI,CAACO,IAAL,GAAYP,IAAI,CAACO,IAAL,CAAUf,KAAtB,GAA8B,IAApD;AACA,gBAAMgB,cAAc,GAAGnB,MAAM,CAACoB,MAAP,CAAc,IAAd,CAAvB;AACA,gBAAMC,QAAQ,GAAGZ,OAAO,CAACa,WAAR,EAAjB;AACA,gBAAMC,SAAS,GAAGvB,MAAM,CAACoB,MAAP,CAAc,IAAd,CAAlB;;AAEA,eAAK,MAAMI,UAAX,IAAyBH,QAAQ,CAACI,WAAlC,EAA+C;AAC7C,gBAAID,UAAU,CAACE,IAAX,KAAoBnB,MAAM,CAACoB,IAAP,CAAYC,mBAApC,EAAyD;AACvDL,cAAAA,SAAS,CAACC,UAAU,CAACN,IAAX,CAAgBf,KAAjB,CAAT,GAAmCqB,UAAnC;AACD;AACF;;AAED,gBAAMK,MAAM,GAAG,CAAC,GAAGrB,cAAc,CAACsB,aAAnB,EACbjB,MADa,EAEbU,SAFa,EAGbJ,cAHa,EAIbJ,gBAJa,EAKbJ,IAAI,CAACoB,YALQ,CAAf;;AAQA,cAAIF,MAAM,CAACG,IAAP,GAAc,CAAlB,EAAqB;AACnB,kBAAMC,mBAAmB,GAAG,CAAC,GAAGJ,MAAM,CAACK,MAAP,EAAJ,CAA5B;AACA,kBAAMC,wBAAwB,GAAGF,mBAAmB,CAACG,KAApB,CAA0B,CAA1B,CAAjC;AACA,kBAAMC,oBAAoB,GAAGF,wBAAwB,CAACG,IAAzB,EAA7B;AACA7B,YAAAA,OAAO,CAAC8B,WAAR,CACE,IAAIlC,aAAa,CAACmC,YAAlB,CACEvB,aAAa,IAAI,IAAjB,GACK,iBAAgBA,aAAc,yCADnC,GAEI,8DAHN,EAIE;AACEwB,cAAAA,KAAK,EAAEJ;AADT,aAJF,CADF;AAUD;;AAED,eAAK,MAAMK,UAAX,IAAyBb,MAAM,CAACK,MAAP,EAAzB,EAA0C;AACxC,kBAAMS,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAxB;AACA,kBAAME,SAAS,GAAGD,KAAK,CAACzB,IAAN,CAAWf,KAA7B;;AAEA,gBAAIyC,SAAS,CAACC,UAAV,CAAqB,IAArB,CAAJ,EAAgC;AAC9BpC,cAAAA,OAAO,CAAC8B,WAAR,CACE,IAAIlC,aAAa,CAACmC,YAAlB,CACEvB,aAAa,IAAI,IAAjB,GACK,iBAAgBA,aAAc,qDADnC,GAEI,0EAHN,EAIE;AACEwB,gBAAAA,KAAK,EAAEC;AADT,eAJF,CADF;AAUD;AACF;AACF;AACF;AACF;;AA7DI,GAAP;AA+DD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.SingleFieldSubscriptionsRule = SingleFieldSubscriptionsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _collectFields = require('../../execution/collectFields.js');\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nfunction SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = (0, _collectFields.collectFields)(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new _GraphQLError.GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}