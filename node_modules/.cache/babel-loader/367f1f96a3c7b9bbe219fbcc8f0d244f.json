{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueOperationTypesRule = UniqueOperationTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\n\nfunction UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes; // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new _GraphQLError.GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`, {\n          nodes: operationType\n        }));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new _GraphQLError.GraphQLError(`There can be only one ${operation} type in schema.`, {\n          nodes: [alreadyDefinedOperationType, operationType]\n        }));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueOperationTypesRule.js"],"names":["Object","defineProperty","exports","value","UniqueOperationTypesRule","_GraphQLError","require","context","schema","getSchema","definedOperationTypes","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","_node$operationTypes","operationTypesNodes","operationTypes","operationType","operation","alreadyDefinedOperationType","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCG,OAAlC,EAA2C;AACzC,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,QAAMC,qBAAqB,GAAGV,MAAM,CAACW,MAAP,CAAc,IAAd,CAA9B;AACA,QAAMC,sBAAsB,GAAGJ,MAAM,GACjC;AACEK,IAAAA,KAAK,EAAEL,MAAM,CAACM,YAAP,EADT;AAEEC,IAAAA,QAAQ,EAAEP,MAAM,CAACQ,eAAP,EAFZ;AAGEC,IAAAA,YAAY,EAAET,MAAM,CAACU,mBAAP;AAHhB,GADiC,GAMjC,EANJ;AAOA,SAAO;AACLC,IAAAA,gBAAgB,EAAEC,mBADb;AAELC,IAAAA,eAAe,EAAED;AAFZ,GAAP;;AAKA,WAASA,mBAAT,CAA6BE,IAA7B,EAAmC;AACjC,QAAIC,oBAAJ,CADiC,CAGjC;;AAEA;;;AACA,UAAMC,mBAAmB,GACvB,CAACD,oBAAoB,GAAGD,IAAI,CAACG,cAA7B,MAAiD,IAAjD,IACAF,oBAAoB,KAAK,KAAK,CAD9B,GAEIA,oBAFJ,GAGI,EAJN;;AAMA,SAAK,MAAMG,aAAX,IAA4BF,mBAA5B,EAAiD;AAC/C,YAAMG,SAAS,GAAGD,aAAa,CAACC,SAAhC;AACA,YAAMC,2BAA2B,GAAGlB,qBAAqB,CAACiB,SAAD,CAAzD;;AAEA,UAAIf,sBAAsB,CAACe,SAAD,CAA1B,EAAuC;AACrCpB,QAAAA,OAAO,CAACsB,WAAR,CACE,IAAIxB,aAAa,CAACyB,YAAlB,CACG,YAAWH,SAAU,yDADxB,EAEE;AACEI,UAAAA,KAAK,EAAEL;AADT,SAFF,CADF;AAQD,OATD,MASO,IAAIE,2BAAJ,EAAiC;AACtCrB,QAAAA,OAAO,CAACsB,WAAR,CACE,IAAIxB,aAAa,CAACyB,YAAlB,CACG,yBAAwBH,SAAU,kBADrC,EAEE;AACEI,UAAAA,KAAK,EAAE,CAACH,2BAAD,EAA8BF,aAA9B;AADT,SAFF,CADF;AAQD,OATM,MASA;AACLhB,QAAAA,qBAAqB,CAACiB,SAAD,CAArB,GAAmCD,aAAnC;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueOperationTypesRule = UniqueOperationTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nfunction UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}