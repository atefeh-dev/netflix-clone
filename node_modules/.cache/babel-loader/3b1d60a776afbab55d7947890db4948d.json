{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.Source = void 0;\nexports.isSource = isSource;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\n\n\nclass Source {\n  constructor(body) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GraphQL request';\n    let locationOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      line: 1,\n      column: 1\n    };\n    typeof body === 'string' || (0, _devAssert.devAssert)(false, `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || (0, _devAssert.devAssert)(false, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || (0, _devAssert.devAssert)(false, 'column in locationOffset is 1-indexed and must be positive.');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\n\nexports.Source = Source;\n\nfunction isSource(source) {\n  return (0, _instanceOf.instanceOf)(source, Source);\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/language/source.js"],"names":["Object","defineProperty","exports","value","Source","isSource","_devAssert","require","_inspect","_instanceOf","constructor","body","name","locationOffset","line","column","devAssert","inspect","Symbol","toStringTag","source","instanceOf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;AACAF,OAAO,CAACG,QAAR,GAAmBA,QAAnB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAtB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,0BAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMH,MAAN,CAAa;AACXM,EAAAA,WAAW,CACTC,IADS,EAOT;AAAA,QALAC,IAKA,uEALO,iBAKP;AAAA,QAJAC,cAIA,uEAJiB;AACfC,MAAAA,IAAI,EAAE,CADS;AAEfC,MAAAA,MAAM,EAAE;AAFO,KAIjB;AACA,WAAOJ,IAAP,KAAgB,QAAhB,IACE,CAAC,GAAGL,UAAU,CAACU,SAAf,EACE,KADF,EAEG,oCAAmC,CAAC,GAAGR,QAAQ,CAACS,OAAb,EAAsBN,IAAtB,CAA4B,GAFlE,CADF;AAKA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKA,cAAL,CAAoBC,IAApB,GAA2B,CAA3B,IACE,CAAC,GAAGR,UAAU,CAACU,SAAf,EACE,KADF,EAEE,2DAFF,CADF;AAKA,SAAKH,cAAL,CAAoBE,MAApB,GAA6B,CAA7B,IACE,CAAC,GAAGT,UAAU,CAACU,SAAf,EACE,KADF,EAEE,6DAFF,CADF;AAKD;;AAEsB,OAAlBE,MAAM,CAACC,WAAW,IAAI;AACzB,WAAO,QAAP;AACD;;AA/BU;AAiCb;AACA;AACA;AACA;AACA;;;AAEAjB,OAAO,CAACE,MAAR,GAAiBA,MAAjB;;AAEA,SAASC,QAAT,CAAkBe,MAAlB,EAA0B;AACxB,SAAO,CAAC,GAAGX,WAAW,CAACY,UAAhB,EAA4BD,MAA5B,EAAoChB,MAApC,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.Source = void 0;\nexports.isSource = isSource;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nclass Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Body must be a string. Received: ${(0, _inspect.inspect)(body)}.`,\n      );\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      (0, _devAssert.devAssert)(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexports.Source = Source;\n\nfunction isSource(source) {\n  return (0, _instanceOf.instanceOf)(source, Source);\n}\n"]},"metadata":{},"sourceType":"script"}