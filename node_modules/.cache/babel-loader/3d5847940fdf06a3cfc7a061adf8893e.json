{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.promiseForObject = promiseForObject;\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\n\nfunction promiseForObject(object) {\n  return Promise.all(Object.values(object)).then(resolvedValues => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/jsutils/promiseForObject.js"],"names":["Object","defineProperty","exports","value","promiseForObject","object","Promise","all","values","then","resolvedValues","resolvedObject","create","i","key","keys","entries"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAChC,SAAOC,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACQ,MAAP,CAAcH,MAAd,CAAZ,EAAmCI,IAAnC,CAAyCC,cAAD,IAAoB;AACjE,UAAMC,cAAc,GAAGX,MAAM,CAACY,MAAP,CAAc,IAAd,CAAvB;;AAEA,SAAK,MAAM,CAACC,CAAD,EAAIC,GAAJ,CAAX,IAAuBd,MAAM,CAACe,IAAP,CAAYV,MAAZ,EAAoBW,OAApB,EAAvB,EAAsD;AACpDL,MAAAA,cAAc,CAACG,GAAD,CAAd,GAAsBJ,cAAc,CAACG,CAAD,CAApC;AACD;;AAED,WAAOF,cAAP;AACD,GARM,CAAP;AASD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.promiseForObject = promiseForObject;\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nfunction promiseForObject(object) {\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}\n"]},"metadata":{},"sourceType":"script"}