{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\n\n\nfunction NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(operation)) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new _GraphQLError.GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n              nodes: fragmentDef\n            }));\n          }\n        }\n      }\n\n    }\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.js"],"names":["Object","defineProperty","exports","value","NoUnusedFragmentsRule","_GraphQLError","require","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","create","operation","fragment","getRecursivelyReferencedFragments","name","fragmentDef","fragName","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,qBAAT,CAA+BG,OAA/B,EAAwC;AACtC,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,SAAO;AACLC,IAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxBH,MAAAA,aAAa,CAACI,IAAd,CAAmBD,IAAnB;AACA,aAAO,KAAP;AACD,KAJI;;AAMLE,IAAAA,kBAAkB,CAACF,IAAD,EAAO;AACvBF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,IAAlB;AACA,aAAO,KAAP;AACD,KATI;;AAWLG,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,GAAG;AACN,cAAMC,gBAAgB,GAAGhB,MAAM,CAACiB,MAAP,CAAc,IAAd,CAAzB;;AAEA,aAAK,MAAMC,SAAX,IAAwBV,aAAxB,EAAuC;AACrC,eAAK,MAAMW,QAAX,IAAuBZ,OAAO,CAACa,iCAAR,CACrBF,SADqB,CAAvB,EAEG;AACDF,YAAAA,gBAAgB,CAACG,QAAQ,CAACE,IAAT,CAAclB,KAAf,CAAhB,GAAwC,IAAxC;AACD;AACF;;AAED,aAAK,MAAMmB,WAAX,IAA0Bb,YAA1B,EAAwC;AACtC,gBAAMc,QAAQ,GAAGD,WAAW,CAACD,IAAZ,CAAiBlB,KAAlC;;AAEA,cAAIa,gBAAgB,CAACO,QAAD,CAAhB,KAA+B,IAAnC,EAAyC;AACvChB,YAAAA,OAAO,CAACiB,WAAR,CACE,IAAInB,aAAa,CAACoB,YAAlB,CACG,aAAYF,QAAS,kBADxB,EAEE;AACEG,cAAAA,KAAK,EAAEJ;AADT,aAFF,CADF;AAQD;AACF;AACF;;AA1BO;AAXL,GAAP;AAwCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUnusedFragmentsRule = NoUnusedFragmentsRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nfunction NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Fragment \"${fragName}\" is never used.`,\n                {\n                  nodes: fragmentDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}