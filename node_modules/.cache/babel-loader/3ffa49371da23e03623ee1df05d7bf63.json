{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.coerceInputValue = coerceInputValue;\n\nvar _didYouMean = require('../jsutils/didYouMean.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _printPathArray = require('../jsutils/printPathArray.js');\n\nvar _suggestionList = require('../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _definition = require('../type/definition.js');\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\n\n\nfunction coerceInputValue(inputValue, type) {\n  let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${(0, _printPathArray.printPathArray)(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if ((0, _definition.isNonNullType)(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected non-nullable type \"${(0, _inspect.inspect)(type)}\" not to be null.`));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = (0, _Path.addPath)(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(inputValue)) {\n      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type \"${type.name}\" to be an object.`));\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          const typeStr = (0, _inspect.inspect)(field.type);\n          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = (0, _suggestionList.suggestionList)(fieldName, Object.keys(type.getFields()));\n        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Field \"${fieldName}\" is not defined by type \"${type.name}\".` + (0, _didYouMean.didYouMean)(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof _GraphQLError.GraphQLError) {\n        onError((0, _Path.pathToArray)(path), inputValue, error);\n      } else {\n        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n          originalError: error\n        }));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(`Expected type \"${type.name}\".`));\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/utilities/coerceInputValue.js"],"names":["Object","defineProperty","exports","value","coerceInputValue","_didYouMean","require","_inspect","_invariant","_isIterableObject","_isObjectLike","_Path","_printPathArray","_suggestionList","_GraphQLError","_definition","inputValue","type","onError","defaultOnError","coerceInputValueImpl","undefined","path","invalidValue","error","errorPrefix","inspect","length","printPathArray","message","isNonNullType","ofType","pathToArray","GraphQLError","isListType","itemType","isIterableObject","Array","from","itemValue","index","itemPath","addPath","isInputObjectType","isObjectLike","name","coercedValue","fieldDefs","getFields","field","values","fieldValue","defaultValue","typeStr","fieldName","keys","suggestions","suggestionList","didYouMean","isLeafType","parseResult","parseValue","originalError","invariant"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.coerceInputValue = coerceInputValue;\n\nvar _didYouMean = require('../jsutils/didYouMean.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _isIterableObject = require('../jsutils/isIterableObject.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _printPathArray = require('../jsutils/printPathArray.js');\n\nvar _suggestionList = require('../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _definition = require('../type/definition.js');\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nfunction coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${(0, _printPathArray.printPathArray)(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if ((0, _definition.isNonNullType)(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      (0, _Path.pathToArray)(path),\n      inputValue,\n      new _GraphQLError.GraphQLError(\n        `Expected non-nullable type \"${(0, _inspect.inspect)(\n          type,\n        )}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    const itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = (0, _Path.addPath)(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(inputValue)) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(\n          `Expected type \"${type.name}\" to be an object.`,\n        ),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          const typeStr = (0, _inspect.inspect)(field.type);\n          onError(\n            (0, _Path.pathToArray)(path),\n            inputValue,\n            new _GraphQLError.GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        (0, _Path.addPath)(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = (0, _suggestionList.suggestionList)(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof _GraphQLError.GraphQLError) {\n        onError((0, _Path.pathToArray)(path), inputValue, error);\n      } else {\n        onError(\n          (0, _Path.pathToArray)(path),\n          inputValue,\n          new _GraphQLError.GraphQLError(\n            `Expected type \"${type.name}\". ` + error.message,\n            {\n              originalError: error,\n            },\n          ),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        (0, _Path.pathToArray)(path),\n        inputValue,\n        new _GraphQLError.GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected input type: ' + (0, _inspect.inspect)(type),\n    );\n}\n"]},"metadata":{},"sourceType":"script"}