{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _visitor = require('../language/visitor.js');\n\nvar _validate = require('../type/validate.js');\n\nvar _TypeInfo = require('../utilities/TypeInfo.js');\n\nvar _specifiedRules = require('./specifiedRules.js');\n\nvar _ValidationContext = require('./ValidationContext.js');\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\n\nfunction validate(schema, documentAST) {\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedRules;\n  let options = arguments.length > 3 ? arguments[3] : undefined;\n  let typeInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _TypeInfo.TypeInfo(schema);\n\n  var _options$maxErrors;\n\n  const maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(schema, documentAST, typeInfo, error => {\n    if (errors.length >= maxErrors) {\n      errors.push(new _GraphQLError.GraphQLError('Too many validation errors, error limit reached. Validation aborted.')); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(rules.map(rule => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(documentAST, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\n\nfunction validateSDL(documentAST, schemaToExtend) {\n  let rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _specifiedRules.specifiedSDLRules;\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(documentAST, schemaToExtend, error => {\n    errors.push(error);\n  });\n  const visitors = rules.map(rule => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/validate.js"],"names":["Object","defineProperty","exports","value","assertValidSDL","assertValidSDLExtension","validate","validateSDL","_devAssert","require","_GraphQLError","_visitor","_validate","_TypeInfo","_specifiedRules","_ValidationContext","schema","documentAST","rules","specifiedRules","options","typeInfo","TypeInfo","_options$maxErrors","maxErrors","devAssert","assertValidSchema","abortObj","freeze","errors","context","ValidationContext","error","length","push","GraphQLError","visitor","visitInParallel","map","rule","visit","visitWithTypeInfo","e","schemaToExtend","specifiedSDLRules","SDLValidationContext","visitors","Error","message","join"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertValidSDL = assertValidSDL;\nexports.assertValidSDLExtension = assertValidSDLExtension;\nexports.validate = validate;\nexports.validateSDL = validateSDL;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _visitor = require('../language/visitor.js');\n\nvar _validate = require('../type/validate.js');\n\nvar _TypeInfo = require('../utilities/TypeInfo.js');\n\nvar _specifiedRules = require('./specifiedRules.js');\n\nvar _ValidationContext = require('./ValidationContext.js');\n\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\nfunction validate(\n  schema,\n  documentAST,\n  rules = _specifiedRules.specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new _TypeInfo.TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || (0, _devAssert.devAssert)(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  (0, _validate.assertValidSchema)(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new _ValidationContext.ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new _GraphQLError.GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = (0, _visitor.visitInParallel)(\n    rules.map((rule) => rule(context)),\n  ); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    (0, _visitor.visit)(\n      documentAST,\n      (0, _TypeInfo.visitWithTypeInfo)(typeInfo, visitor),\n    );\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nfunction validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = _specifiedRules.specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new _ValidationContext.SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  (0, _visitor.visit)(documentAST, (0, _visitor.visitInParallel)(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nfunction assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}