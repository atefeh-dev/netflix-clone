{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.promiseReduce = promiseReduce;\n\nvar _isPromise = require('./isPromise.js');\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\n\nfunction promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = (0, _isPromise.isPromise)(accumulator) ? accumulator.then(resolved => callbackFn(resolved, value)) : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/jsutils/promiseReduce.js"],"names":["Object","defineProperty","exports","value","promiseReduce","_isPromise","require","values","callbackFn","initialValue","accumulator","isPromise","then","resolved"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,aAAT,CAAuBG,MAAvB,EAA+BC,UAA/B,EAA2CC,YAA3C,EAAyD;AACvD,MAAIC,WAAW,GAAGD,YAAlB;;AAEA,OAAK,MAAMN,KAAX,IAAoBI,MAApB,EAA4B;AAC1BG,IAAAA,WAAW,GAAG,CAAC,GAAGL,UAAU,CAACM,SAAf,EAA0BD,WAA1B,IACVA,WAAW,CAACE,IAAZ,CAAkBC,QAAD,IAAcL,UAAU,CAACK,QAAD,EAAWV,KAAX,CAAzC,CADU,GAEVK,UAAU,CAACE,WAAD,EAAcP,KAAd,CAFd;AAGD;;AAED,SAAOO,WAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.promiseReduce = promiseReduce;\n\nvar _isPromise = require('./isPromise.js');\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nfunction promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = (0, _isPromise.isPromise)(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n"]},"metadata":{},"sourceType":"script"}