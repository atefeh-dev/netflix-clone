{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\n\nfunction UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if ((0, _definition.isEnumType)(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new _GraphQLError.GraphQLError(`Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`, {\n          nodes: valueDef.name\n        }));\n      } else if (valueNames[valueName]) {\n        context.reportError(new _GraphQLError.GraphQLError(`Enum value \"${typeName}.${valueName}\" can only be defined once.`, {\n          nodes: [valueNames[valueName], valueDef.name]\n        }));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueEnumValueNamesRule","_GraphQLError","require","_definition","context","schema","getSchema","existingTypeMap","getTypeMap","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","_node$values","typeName","name","valueNodes","values","valueNames","valueDef","valueName","existingType","isEnumType","getValue","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,0BAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCI,OAAlC,EAA2C;AACzC,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,QAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBZ,MAAM,CAACa,MAAP,CAAc,IAAd,CAAvD;AACA,QAAMC,eAAe,GAAGd,MAAM,CAACa,MAAP,CAAc,IAAd,CAAxB;AACA,SAAO;AACLE,IAAAA,kBAAkB,EAAEC,oBADf;AAELC,IAAAA,iBAAiB,EAAED;AAFd,GAAP;;AAKA,WAASA,oBAAT,CAA8BE,IAA9B,EAAoC;AAClC,QAAIC,YAAJ;;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUlB,KAA3B;;AAEA,QAAI,CAACW,eAAe,CAACM,QAAD,CAApB,EAAgC;AAC9BN,MAAAA,eAAe,CAACM,QAAD,CAAf,GAA4BpB,MAAM,CAACa,MAAP,CAAc,IAAd,CAA5B;AACD,KAPiC,CAOhC;;AAEF;;;AAEA,UAAMS,UAAU,GACd,CAACH,YAAY,GAAGD,IAAI,CAACK,MAArB,MAAiC,IAAjC,IAAyCJ,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAHN;AAIA,UAAMK,UAAU,GAAGV,eAAe,CAACM,QAAD,CAAlC;;AAEA,SAAK,MAAMK,QAAX,IAAuBH,UAAvB,EAAmC;AACjC,YAAMI,SAAS,GAAGD,QAAQ,CAACJ,IAAT,CAAclB,KAAhC;AACA,YAAMwB,YAAY,GAAGhB,eAAe,CAACS,QAAD,CAApC;;AAEA,UACE,CAAC,GAAGb,WAAW,CAACqB,UAAhB,EAA4BD,YAA5B,KACAA,YAAY,CAACE,QAAb,CAAsBH,SAAtB,CAFF,EAGE;AACAlB,QAAAA,OAAO,CAACsB,WAAR,CACE,IAAIzB,aAAa,CAAC0B,YAAlB,CACG,eAAcX,QAAS,IAAGM,SAAU,mFADvC,EAEE;AACEM,UAAAA,KAAK,EAAEP,QAAQ,CAACJ;AADlB,SAFF,CADF;AAQD,OAZD,MAYO,IAAIG,UAAU,CAACE,SAAD,CAAd,EAA2B;AAChClB,QAAAA,OAAO,CAACsB,WAAR,CACE,IAAIzB,aAAa,CAAC0B,YAAlB,CACG,eAAcX,QAAS,IAAGM,SAAU,6BADvC,EAEE;AACEM,UAAAA,KAAK,EAAE,CAACR,UAAU,CAACE,SAAD,CAAX,EAAwBD,QAAQ,CAACJ,IAAjC;AADT,SAFF,CADF;AAQD,OATM,MASA;AACLG,QAAAA,UAAU,CAACE,SAAD,CAAV,GAAwBD,QAAQ,CAACJ,IAAjC;AACD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueEnumValueNamesRule = UniqueEnumValueNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _definition = require('../../type/definition.js');\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nfunction UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (\n        (0, _definition.isEnumType)(existingType) &&\n        existingType.getValue(valueName)\n      ) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}