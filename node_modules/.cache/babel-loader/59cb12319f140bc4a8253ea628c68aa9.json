{"ast":null,"code":"var _jsxFileName = \"/home/atefeh/Documents/my-project/netflix/src/index.js\";\n\n/** @format */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { HttpLink } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\nconst httpLink = new HttpLink({\n  uri: process.env.ASTRA_GRAPHQL_ENDPOINT\n});\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext({\n    headers: {\n      \"x-cassandra-token\": process.env.ASTRA_DB_APPLICATION_TOKEN\n    }\n  });\n  return forward(operation);\n});\nconst client = new ApolloClient({\n  link: concat(authMiddleware, httpLink),\n  cache: new InMemoryCache()\n});\n\nconst Main = () => /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 35,\n  columnNumber: 3\n}, this);\n\n_c = Main;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/src/index.js"],"names":["React","ReactDOM","Provider","App","createStore","applyMiddleware","compose","thunk","reducers","ApolloClient","ApolloProvider","InMemoryCache","BrowserRouter","HttpLink","store","httpLink","uri","process","env","ASTRA_GRAPHQL_ENDPOINT","authMiddleware","ApolloLink","operation","forward","setContext","headers","ASTRA_DB_APPLICATION_TOKEN","client","link","concat","cache","Main","render","document","querySelector"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,KAAK,GAAGV,WAAW,CAACI,QAAD,EAAWF,OAAO,CAACD,eAAe,CAACE,KAAD,CAAhB,CAAlB,CAAzB;AACA,MAAMQ,QAAQ,GAAG,IAAIF,QAAJ,CAAa;AAAEG,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAnB,CAAb,CAAjB;AAEA,MAAMC,cAAc,GAAG,IAAIC,UAAJ,CAAe,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAC5D;AACAD,EAAAA,SAAS,CAACE,UAAV,CAAqB;AACnBC,IAAAA,OAAO,EAAE;AACP,2BAAqBR,OAAO,CAACC,GAAR,CAAYQ;AAD1B;AADU,GAArB;AAMA,SAAOH,OAAO,CAACD,SAAD,CAAd;AACD,CATsB,CAAvB;AAWA,MAAMK,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC9BmB,EAAAA,IAAI,EAAEC,MAAM,CAACT,cAAD,EAAiBL,QAAjB,CADkB;AAG9Be,EAAAA,KAAK,EAAE,IAAInB,aAAJ;AAHuB,CAAjB,CAAf;;AAMA,MAAMoB,IAAI,GAAG,mBACX,QAAC,aAAD;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEb,KAAjB;AAAA,6BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMiB,I;AAUN9B,QAAQ,CAAC+B,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0BC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAA1B","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { HttpLink } from \"@apollo/client\";\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\nconst httpLink = new HttpLink({ uri: process.env.ASTRA_GRAPHQL_ENDPOINT });\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext({\n    headers: {\n      \"x-cassandra-token\": process.env.ASTRA_DB_APPLICATION_TOKEN,\n    },\n  });\n\n  return forward(operation);\n});\n\nconst client = new ApolloClient({\n  link: concat(authMiddleware, httpLink),\n\n  cache: new InMemoryCache(),\n});\n\nconst Main = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n"]},"metadata":{},"sourceType":"module"}