{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\n\n\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(context.getSchema(), node.type);\n\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(new _GraphQLError.GraphQLError(`Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`, {\n          nodes: node.type\n        }));\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.js"],"names":["Object","defineProperty","exports","value","VariablesAreInputTypesRule","_GraphQLError","require","_printer","_definition","_typeFromAST","context","VariableDefinition","node","type","typeFromAST","getSchema","undefined","isInputType","variableName","variable","name","typeName","print","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,0BAAR,GAAqCA,0BAArC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,2BAAD,CAAtB;;AAEA,IAAIE,WAAW,GAAGF,OAAO,CAAC,0BAAD,CAAzB;;AAEA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gCAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,0BAAT,CAAoCM,OAApC,EAA6C;AAC3C,SAAO;AACLC,IAAAA,kBAAkB,CAACC,IAAD,EAAO;AACvB,YAAMC,IAAI,GAAG,CAAC,GAAGJ,YAAY,CAACK,WAAjB,EACXJ,OAAO,CAACK,SAAR,EADW,EAEXH,IAAI,CAACC,IAFM,CAAb;;AAKA,UAAIA,IAAI,KAAKG,SAAT,IAAsB,CAAC,CAAC,GAAGR,WAAW,CAACS,WAAhB,EAA6BJ,IAA7B,CAA3B,EAA+D;AAC7D,cAAMK,YAAY,GAAGN,IAAI,CAACO,QAAL,CAAcC,IAAd,CAAmBjB,KAAxC;AACA,cAAMkB,QAAQ,GAAG,CAAC,GAAGd,QAAQ,CAACe,KAAb,EAAoBV,IAAI,CAACC,IAAzB,CAAjB;AACAH,QAAAA,OAAO,CAACa,WAAR,CACE,IAAIlB,aAAa,CAACmB,YAAlB,CACG,cAAaN,YAAa,+BAA8BG,QAAS,IADpE,EAEE;AACEI,UAAAA,KAAK,EAAEb,IAAI,CAACC;AADd,SAFF,CADF;AAQD;AACF;;AAnBI,GAAP;AAqBD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.VariablesAreInputTypesRule = VariablesAreInputTypesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _printer = require('../../language/printer.js');\n\nvar _definition = require('../../type/definition.js');\n\nvar _typeFromAST = require('../../utilities/typeFromAST.js');\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nfunction VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = (0, _typeFromAST.typeFromAST)(\n        context.getSchema(),\n        node.type,\n      );\n\n      if (type !== undefined && !(0, _definition.isInputType)(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = (0, _printer.print)(node.type);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}