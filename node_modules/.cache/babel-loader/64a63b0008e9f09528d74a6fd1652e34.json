{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.printIntrospectionSchema = printIntrospectionSchema;\nexports.printSchema = printSchema;\nexports.printType = printType;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _blockString = require('../language/blockString.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _scalars = require('../type/scalars.js');\n\nvar _astFromValue = require('./astFromValue.js');\n\nfunction printSchema(schema) {\n  return printFilteredSchema(schema, n => !(0, _directives.isSpecifiedDirective)(n), isDefinedType);\n}\n\nfunction printIntrospectionSchema(schema) {\n  return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType);\n}\n\nfunction isDefinedType(type) {\n  return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter) {\n  const directives = schema.getDirectives().filter(directiveFilter);\n  const types = Object.values(schema.getTypeMap()).filter(typeFilter);\n  return [printSchemaDefinition(schema), ...directives.map(directive => printDirective(directive)), ...types.map(type => printType(type))].filter(Boolean).join('\\n\\n');\n}\n\nfunction printSchemaDefinition(schema) {\n  if (schema.description == null && isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  const operationTypes = [];\n  const queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return printDescription(schema) + `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n * ```graphql\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *     subscription: Subscription\n *   }\n * ```\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\n\nfunction isSchemaOfCommonNames(schema) {\n  const queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction printType(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return printScalar(type);\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return printObject(type);\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return printInterface(type);\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return printUnion(type);\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return printEnum(type);\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return printInputObject(type);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));\n}\n\nfunction printScalar(type) {\n  return printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type);\n}\n\nfunction printImplementedInterfaces(type) {\n  const interfaces = type.getInterfaces();\n  return interfaces.length ? ' implements ' + interfaces.map(i => i.name).join(' & ') : '';\n}\n\nfunction printObject(type) {\n  return printDescription(type) + `type ${type.name}` + printImplementedInterfaces(type) + printFields(type);\n}\n\nfunction printInterface(type) {\n  return printDescription(type) + `interface ${type.name}` + printImplementedInterfaces(type) + printFields(type);\n}\n\nfunction printUnion(type) {\n  const types = type.getTypes();\n  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type) {\n  const values = type.getValues().map((value, i) => printDescription(value, '  ', !i) + '  ' + value.name + printDeprecated(value.deprecationReason));\n  return printDescription(type) + `enum ${type.name}` + printBlock(values);\n}\n\nfunction printInputObject(type) {\n  const fields = Object.values(type.getFields()).map((f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f));\n  return printDescription(type) + `input ${type.name}` + printBlock(fields);\n}\n\nfunction printFields(type) {\n  const fields = Object.values(type.getFields()).map((f, i) => printDescription(f, '  ', !i) + '  ' + f.name + printArgs(f.args, '  ') + ': ' + String(f.type) + printDeprecated(f.deprecationReason));\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(args) {\n  let indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n\n  if (args.every(arg => !arg.description)) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return '(\\n' + args.map((arg, i) => printDescription(arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg)).join('\\n') + '\\n' + indentation + ')';\n}\n\nfunction printInputValue(arg) {\n  const defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);\n  let argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += ` = ${(0, _printer.print)(defaultAST)}`;\n  }\n\n  return argDecl + printDeprecated(arg.deprecationReason);\n}\n\nfunction printDirective(directive) {\n  return printDescription(directive) + 'directive @' + directive.name + printArgs(directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');\n}\n\nfunction printDeprecated(reason) {\n  if (reason == null) {\n    return '';\n  }\n\n  if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {\n    const astValue = (0, _printer.print)({\n      kind: _kinds.Kind.STRING,\n      value: reason\n    });\n    return ` @deprecated(reason: ${astValue})`;\n  }\n\n  return ' @deprecated';\n}\n\nfunction printSpecifiedByURL(scalar) {\n  if (scalar.specifiedByURL == null) {\n    return '';\n  }\n\n  const astValue = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: scalar.specifiedByURL\n  });\n  return ` @specifiedBy(url: ${astValue})`;\n}\n\nfunction printDescription(def) {\n  let indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let firstInBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const {\n    description\n  } = def;\n\n  if (description == null) {\n    return '';\n  }\n\n  const blockString = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: description,\n    block: (0, _blockString.isPrintableAsBlockString)(description)\n  });\n  const prefix = indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/utilities/printSchema.js"],"names":["Object","defineProperty","exports","value","printIntrospectionSchema","printSchema","printType","_inspect","require","_invariant","_blockString","_kinds","_printer","_definition","_directives","_introspection","_scalars","_astFromValue","schema","printFilteredSchema","n","isSpecifiedDirective","isDefinedType","isIntrospectionType","type","isSpecifiedScalarType","directiveFilter","typeFilter","directives","getDirectives","filter","types","values","getTypeMap","printSchemaDefinition","map","directive","printDirective","Boolean","join","description","isSchemaOfCommonNames","operationTypes","queryType","getQueryType","push","name","mutationType","getMutationType","subscriptionType","getSubscriptionType","printDescription","isScalarType","printScalar","isObjectType","printObject","isInterfaceType","printInterface","isUnionType","printUnion","isEnumType","printEnum","isInputObjectType","printInputObject","invariant","inspect","printSpecifiedByURL","printImplementedInterfaces","interfaces","getInterfaces","length","i","printFields","getTypes","possibleTypes","getValues","printDeprecated","deprecationReason","printBlock","fields","getFields","f","printInputValue","printArgs","args","String","items","indentation","every","arg","defaultAST","astFromValue","defaultValue","argDecl","print","isRepeatable","locations","reason","DEFAULT_DEPRECATION_REASON","astValue","kind","Kind","STRING","scalar","specifiedByURL","def","firstInBlock","blockString","block","isPrintableAsBlockString","prefix","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.printIntrospectionSchema = printIntrospectionSchema;\nexports.printSchema = printSchema;\nexports.printType = printType;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _blockString = require('../language/blockString.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _scalars = require('../type/scalars.js');\n\nvar _astFromValue = require('./astFromValue.js');\n\nfunction printSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    (n) => !(0, _directives.isSpecifiedDirective)(n),\n    isDefinedType,\n  );\n}\n\nfunction printIntrospectionSchema(schema) {\n  return printFilteredSchema(\n    schema,\n    _directives.isSpecifiedDirective,\n    _introspection.isIntrospectionType,\n  );\n}\n\nfunction isDefinedType(type) {\n  return (\n    !(0, _scalars.isSpecifiedScalarType)(type) &&\n    !(0, _introspection.isIntrospectionType)(type)\n  );\n}\n\nfunction printFilteredSchema(schema, directiveFilter, typeFilter) {\n  const directives = schema.getDirectives().filter(directiveFilter);\n  const types = Object.values(schema.getTypeMap()).filter(typeFilter);\n  return [\n    printSchemaDefinition(schema),\n    ...directives.map((directive) => printDirective(directive)),\n    ...types.map((type) => printType(type)),\n  ]\n    .filter(Boolean)\n    .join('\\n\\n');\n}\n\nfunction printSchemaDefinition(schema) {\n  if (schema.description == null && isSchemaOfCommonNames(schema)) {\n    return;\n  }\n\n  const operationTypes = [];\n  const queryType = schema.getQueryType();\n\n  if (queryType) {\n    operationTypes.push(`  query: ${queryType.name}`);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType) {\n    operationTypes.push(`  mutation: ${mutationType.name}`);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType) {\n    operationTypes.push(`  subscription: ${subscriptionType.name}`);\n  }\n\n  return printDescription(schema) + `schema {\\n${operationTypes.join('\\n')}\\n}`;\n}\n/**\n * GraphQL schema define root types for each type of operation. These types are\n * the same as any other type and can be named in any manner, however there is\n * a common naming convention:\n *\n * ```graphql\n *   schema {\n *     query: Query\n *     mutation: Mutation\n *     subscription: Subscription\n *   }\n * ```\n *\n * When using this naming convention, the schema description can be omitted.\n */\n\nfunction isSchemaOfCommonNames(schema) {\n  const queryType = schema.getQueryType();\n\n  if (queryType && queryType.name !== 'Query') {\n    return false;\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && mutationType.name !== 'Mutation') {\n    return false;\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && subscriptionType.name !== 'Subscription') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction printType(type) {\n  if ((0, _definition.isScalarType)(type)) {\n    return printScalar(type);\n  }\n\n  if ((0, _definition.isObjectType)(type)) {\n    return printObject(type);\n  }\n\n  if ((0, _definition.isInterfaceType)(type)) {\n    return printInterface(type);\n  }\n\n  if ((0, _definition.isUnionType)(type)) {\n    return printUnion(type);\n  }\n\n  if ((0, _definition.isEnumType)(type)) {\n    return printEnum(type);\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    return printInputObject(type);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false ||\n    (0, _invariant.invariant)(\n      false,\n      'Unexpected type: ' + (0, _inspect.inspect)(type),\n    );\n}\n\nfunction printScalar(type) {\n  return (\n    printDescription(type) + `scalar ${type.name}` + printSpecifiedByURL(type)\n  );\n}\n\nfunction printImplementedInterfaces(type) {\n  const interfaces = type.getInterfaces();\n  return interfaces.length\n    ? ' implements ' + interfaces.map((i) => i.name).join(' & ')\n    : '';\n}\n\nfunction printObject(type) {\n  return (\n    printDescription(type) +\n    `type ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printInterface(type) {\n  return (\n    printDescription(type) +\n    `interface ${type.name}` +\n    printImplementedInterfaces(type) +\n    printFields(type)\n  );\n}\n\nfunction printUnion(type) {\n  const types = type.getTypes();\n  const possibleTypes = types.length ? ' = ' + types.join(' | ') : '';\n  return printDescription(type) + 'union ' + type.name + possibleTypes;\n}\n\nfunction printEnum(type) {\n  const values = type\n    .getValues()\n    .map(\n      (value, i) =>\n        printDescription(value, '  ', !i) +\n        '  ' +\n        value.name +\n        printDeprecated(value.deprecationReason),\n    );\n  return printDescription(type) + `enum ${type.name}` + printBlock(values);\n}\n\nfunction printInputObject(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) => printDescription(f, '  ', !i) + '  ' + printInputValue(f),\n  );\n  return printDescription(type) + `input ${type.name}` + printBlock(fields);\n}\n\nfunction printFields(type) {\n  const fields = Object.values(type.getFields()).map(\n    (f, i) =>\n      printDescription(f, '  ', !i) +\n      '  ' +\n      f.name +\n      printArgs(f.args, '  ') +\n      ': ' +\n      String(f.type) +\n      printDeprecated(f.deprecationReason),\n  );\n  return printBlock(fields);\n}\n\nfunction printBlock(items) {\n  return items.length !== 0 ? ' {\\n' + items.join('\\n') + '\\n}' : '';\n}\n\nfunction printArgs(args, indentation = '') {\n  if (args.length === 0) {\n    return '';\n  } // If every arg does not have a description, print them on one line.\n\n  if (args.every((arg) => !arg.description)) {\n    return '(' + args.map(printInputValue).join(', ') + ')';\n  }\n\n  return (\n    '(\\n' +\n    args\n      .map(\n        (arg, i) =>\n          printDescription(arg, '  ' + indentation, !i) +\n          '  ' +\n          indentation +\n          printInputValue(arg),\n      )\n      .join('\\n') +\n    '\\n' +\n    indentation +\n    ')'\n  );\n}\n\nfunction printInputValue(arg) {\n  const defaultAST = (0, _astFromValue.astFromValue)(\n    arg.defaultValue,\n    arg.type,\n  );\n  let argDecl = arg.name + ': ' + String(arg.type);\n\n  if (defaultAST) {\n    argDecl += ` = ${(0, _printer.print)(defaultAST)}`;\n  }\n\n  return argDecl + printDeprecated(arg.deprecationReason);\n}\n\nfunction printDirective(directive) {\n  return (\n    printDescription(directive) +\n    'directive @' +\n    directive.name +\n    printArgs(directive.args) +\n    (directive.isRepeatable ? ' repeatable' : '') +\n    ' on ' +\n    directive.locations.join(' | ')\n  );\n}\n\nfunction printDeprecated(reason) {\n  if (reason == null) {\n    return '';\n  }\n\n  if (reason !== _directives.DEFAULT_DEPRECATION_REASON) {\n    const astValue = (0, _printer.print)({\n      kind: _kinds.Kind.STRING,\n      value: reason,\n    });\n    return ` @deprecated(reason: ${astValue})`;\n  }\n\n  return ' @deprecated';\n}\n\nfunction printSpecifiedByURL(scalar) {\n  if (scalar.specifiedByURL == null) {\n    return '';\n  }\n\n  const astValue = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: scalar.specifiedByURL,\n  });\n  return ` @specifiedBy(url: ${astValue})`;\n}\n\nfunction printDescription(def, indentation = '', firstInBlock = true) {\n  const { description } = def;\n\n  if (description == null) {\n    return '';\n  }\n\n  const blockString = (0, _printer.print)({\n    kind: _kinds.Kind.STRING,\n    value: description,\n    block: (0, _blockString.isPrintableAsBlockString)(description),\n  });\n  const prefix =\n    indentation && !firstInBlock ? '\\n' + indentation : indentation;\n  return prefix + blockString.replace(/\\n/g, '\\n' + indentation) + '\\n';\n}\n"]},"metadata":{},"sourceType":"script"}