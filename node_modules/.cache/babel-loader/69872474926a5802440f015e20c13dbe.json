{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _directives = require('../../type/directives.js');\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\n\n\nfunction KnownArgumentNamesRule(context) {\n  return { // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map(arg => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgsNames);\n        context.reportError(new _GraphQLError.GraphQLError(`Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` + (0, _didYouMean.didYouMean)(suggestions), {\n          nodes: argNode\n        }));\n      }\n    }\n\n  };\n}\n/**\n * @internal\n */\n\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map(arg => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n      directiveArgs[def.name.value] = argsNodes.map(arg => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(argName, knownArgs);\n            context.reportError(new _GraphQLError.GraphQLError(`Unknown argument \"${argName}\" on directive \"@${directiveName}\".` + (0, _didYouMean.didYouMean)(suggestions), {\n              nodes: argNode\n            }));\n          }\n        }\n      }\n\n      return false;\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/KnownArgumentNamesRule.js"],"names":["Object","defineProperty","exports","value","KnownArgumentNamesOnDirectivesRule","KnownArgumentNamesRule","_didYouMean","require","_suggestionList","_GraphQLError","_kinds","_directives","context","Argument","argNode","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","argName","name","knownArgsNames","args","map","arg","suggestions","suggestionList","reportError","GraphQLError","didYouMean","nodes","directiveArgs","create","schema","getSchema","definedDirectives","getDirectives","specifiedDirectives","directive","astDefinitions","getDocument","definitions","def","kind","Kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","Directive","directiveNode","directiveName","knownArgs","includes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.KnownArgumentNamesOnDirectivesRule = KnownArgumentNamesOnDirectivesRule;\nexports.KnownArgumentNamesRule = KnownArgumentNamesRule;\n\nvar _didYouMean = require('../../jsutils/didYouMean.js');\n\nvar _suggestionList = require('../../jsutils/suggestionList.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nfunction KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = (0, _suggestionList.suggestionList)(\n          argName,\n          knownArgsNames,\n        );\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              (0, _didYouMean.didYouMean)(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nfunction KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = (0, _suggestionList.suggestionList)(\n              argName,\n              knownArgs,\n            );\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  (0, _didYouMean.didYouMean)(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}