{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _characterClasses = require('../language/characterClasses.js');\n/**\n * Upholds the spec rules about naming.\n */\n\n\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(`Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`);\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(`Names must start with [_a-zA-Z] but \"${name}\" does not.`);\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/type/assertName.js"],"names":["Object","defineProperty","exports","value","assertEnumValueName","assertName","_devAssert","require","_GraphQLError","_characterClasses","name","devAssert","length","GraphQLError","i","isNameContinue","charCodeAt","isNameStart"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACAF,OAAO,CAACG,UAAR,GAAqBA,UAArB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,0BAAD,CAA3B;;AAEA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,iCAAD,CAA/B;AAEA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBK,IAApB,EAA0B;AACxBA,EAAAA,IAAI,IAAI,IAAR,IAAgB,CAAC,GAAGJ,UAAU,CAACK,SAAf,EAA0B,KAA1B,EAAiC,oBAAjC,CAAhB;AACA,SAAOD,IAAP,KAAgB,QAAhB,IACE,CAAC,GAAGJ,UAAU,CAACK,SAAf,EAA0B,KAA1B,EAAiC,+BAAjC,CADF;;AAGA,MAAID,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIJ,aAAa,CAACK,YAAlB,CACJ,yCADI,CAAN;AAGD;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACE,MAAzB,EAAiC,EAAEE,CAAnC,EAAsC;AACpC,QAAI,CAAC,CAAC,GAAGL,iBAAiB,CAACM,cAAtB,EAAsCL,IAAI,CAACM,UAAL,CAAgBF,CAAhB,CAAtC,CAAL,EAAgE;AAC9D,YAAM,IAAIN,aAAa,CAACK,YAAlB,CACH,6CAA4CH,IAAK,aAD9C,CAAN;AAGD;AACF;;AAED,MAAI,CAAC,CAAC,GAAGD,iBAAiB,CAACQ,WAAtB,EAAmCP,IAAI,CAACM,UAAL,CAAgB,CAAhB,CAAnC,CAAL,EAA6D;AAC3D,UAAM,IAAIR,aAAa,CAACK,YAAlB,CACH,wCAAuCH,IAAK,aADzC,CAAN;AAGD;;AAED,SAAOA,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASN,mBAAT,CAA6BM,IAA7B,EAAmC;AACjC,MAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAA5B,IAAuCA,IAAI,KAAK,MAApD,EAA4D;AAC1D,UAAM,IAAIF,aAAa,CAACK,YAAlB,CACH,gCAA+BH,IAAK,EADjC,CAAN;AAGD;;AAED,SAAOL,UAAU,CAACK,IAAD,CAAjB;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _characterClasses = require('../language/characterClasses.js');\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' ||\n    (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError(\n      'Expected name to be a non-empty string.',\n    );\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(\n      `Enum values cannot be named: ${name}`,\n    );\n  }\n\n  return assertName(name);\n}\n"]},"metadata":{},"sourceType":"script"}