{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.GraphQLError = void 0;\nexports.formatError = formatError;\nexports.printError = printError;\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _location = require('../language/location.js');\n\nvar _printLocation = require('../language/printLocation.js');\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5]\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\n\nclass GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    for (var _len = arguments.length, rawArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rawArgs[_key - 1] = arguments[_key];\n    }\n\n    const {\n      nodes,\n      source,\n      positions,\n      path,\n      originalError,\n      extensions\n    } = toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);\n    const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(node => node.loc).filter(loc => loc != null)); // Compute locations in the source for the given nodes/positions.\n\n    this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n    this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => loc.start);\n    this.locations = positions && source ? positions.map(pos => (0, _location.getLocation)(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(loc => (0, _location.getLocation)(loc.source, loc.start));\n    const originalExtensions = (0, _isObjectLike.isObjectLike)(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n    this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true\n      },\n      name: {\n        enumerable: false\n      },\n      nodes: {\n        enumerable: false\n      },\n      source: {\n        enumerable: false\n      },\n      positions: {\n        enumerable: false\n      },\n      originalError: {\n        enumerable: false\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n    /* c8 ignore stop */\n\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + (0, _printLocation.printLocation)(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + (0, _printLocation.printSourceLocation)(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n\n}\n\nexports.GraphQLError = GraphQLError;\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\n\nfunction printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\n\nfunction formatError(error) {\n  return error.toJSON();\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/error/GraphQLError.js"],"names":["Object","defineProperty","exports","value","GraphQLError","formatError","printError","_isObjectLike","require","_location","_printLocation","toNormalizedArgs","args","firstArg","nodes","source","positions","path","originalError","extensions","Error","constructor","message","_this$nodes","_nodeLocations$","_ref","rawArgs","name","undefined","undefinedIfEmpty","Array","isArray","nodeLocations","map","node","loc","filter","start","locations","pos","getLocation","originalExtensions","isObjectLike","create","defineProperties","writable","enumerable","stack","configurable","captureStackTrace","Symbol","toStringTag","toString","output","printLocation","location","printSourceLocation","toJSON","formattedError","keys","length","array","error"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLError = void 0;\nexports.formatError = formatError;\nexports.printError = printError;\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _location = require('../language/location.js');\n\nvar _printLocation = require('../language/printLocation.js');\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nclass GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => (0, _location.getLocation)(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) =>\n            (0, _location.getLocation)(loc.source, loc.start),\n          );\n    const originalExtensions = (0, _isObjectLike.isObjectLike)(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + (0, _printLocation.printLocation)(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output +=\n          '\\n\\n' +\n          (0, _printLocation.printSourceLocation)(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nexports.GraphQLError = GraphQLError;\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nfunction printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nfunction formatError(error) {\n  return error.toJSON();\n}\n"]},"metadata":{},"sourceType":"script"}