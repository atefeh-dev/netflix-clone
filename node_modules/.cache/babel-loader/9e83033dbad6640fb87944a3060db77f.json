{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\n\n\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(argumentNodes, arg => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(new _GraphQLError.GraphQLError(`Argument \"${parentName}(${argName}:)\" can only be defined once.`, {\n          nodes: argNodes.map(node => node.name)\n        }));\n      }\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueArgumentDefinitionNamesRule","_groupBy","require","_GraphQLError","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","groupBy","arg","argName","argNodes","length","reportError","GraphQLError","nodes","map","node"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iCAAR,GAA4CA,iCAA5C;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,iCAAT,CAA2CI,OAA3C,EAAoD;AAClD,SAAO;AACLC,IAAAA,mBAAmB,CAACC,aAAD,EAAgB;AACjC,UAAIC,qBAAJ,CADiC,CAGjC;;AAEA;;;AACA,YAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAvC,MAAsD,IAAtD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,aAAOG,kBAAkB,CAAE,IAAGJ,aAAa,CAACK,IAAd,CAAmBZ,KAAM,EAA9B,EAAiCS,aAAjC,CAAzB;AACD,KAbI;;AAeLI,IAAAA,uBAAuB,EAAEC,0BAfpB;AAgBLC,IAAAA,sBAAsB,EAAED,0BAhBnB;AAiBLE,IAAAA,oBAAoB,EAAEF,0BAjBjB;AAkBLG,IAAAA,mBAAmB,EAAEH;AAlBhB,GAAP;;AAqBA,WAASA,0BAAT,CAAoCI,QAApC,EAA8C;AAC5C,QAAIC,gBAAJ;;AAEA,UAAMC,QAAQ,GAAGF,QAAQ,CAACN,IAAT,CAAcZ,KAA/B,CAH4C,CAGN;;AAEtC;;AAEA,UAAMqB,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAA7B,MAAyC,IAAzC,IACAH,gBAAgB,KAAK,KAAK,CAD1B,GAEIA,gBAFJ,GAGI,EAJN;;AAMA,SAAK,MAAMI,QAAX,IAAuBF,UAAvB,EAAmC;AACjC,UAAIG,mBAAJ;;AAEA,YAAMC,SAAS,GAAGF,QAAQ,CAACX,IAAT,CAAcZ,KAAhC,CAHiC,CAGM;;AAEvC;;AAEA,YAAMS,aAAa,GACjB,CAACe,mBAAmB,GAAGD,QAAQ,CAACb,SAAhC,MAA+C,IAA/C,IACAc,mBAAmB,KAAK,KAAK,CAD7B,GAEIA,mBAFJ,GAGI,EAJN;AAKAb,MAAAA,kBAAkB,CAAE,GAAES,QAAS,IAAGK,SAAU,EAA1B,EAA6BhB,aAA7B,CAAlB;AACD;;AAED,WAAO,KAAP;AACD;;AAED,WAASE,kBAAT,CAA4Be,UAA5B,EAAwCjB,aAAxC,EAAuD;AACrD,UAAMkB,QAAQ,GAAG,CAAC,GAAGzB,QAAQ,CAAC0B,OAAb,EACfnB,aADe,EAEdoB,GAAD,IAASA,GAAG,CAACjB,IAAJ,CAASZ,KAFH,CAAjB;;AAKA,SAAK,MAAM,CAAC8B,OAAD,EAAUC,QAAV,CAAX,IAAkCJ,QAAlC,EAA4C;AAC1C,UAAII,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB3B,QAAAA,OAAO,CAAC4B,WAAR,CACE,IAAI7B,aAAa,CAAC8B,YAAlB,CACG,aAAYR,UAAW,IAAGI,OAAQ,+BADrC,EAEE;AACEK,UAAAA,KAAK,EAAEJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACzB,IAA5B;AADT,SAFF,CADF;AAQD;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueArgumentDefinitionNamesRule = UniqueArgumentDefinitionNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nfunction UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}