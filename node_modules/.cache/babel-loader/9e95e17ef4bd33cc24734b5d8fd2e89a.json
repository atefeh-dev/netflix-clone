{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;\n\nvar _invariant = require('../../jsutils/invariant.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\n\n\nfunction UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || (0, _invariant.invariant)(false);\n        knownNames = prevKnownNames;\n      }\n\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new _GraphQLError.GraphQLError(`There can be only one input field named \"${fieldName}\".`, {\n          nodes: [knownNames[fieldName], node.name]\n        }));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueInputFieldNamesRule","_invariant","require","_GraphQLError","context","knownNameStack","knownNames","create","ObjectValue","enter","push","leave","prevKnownNames","pop","invariant","ObjectField","node","fieldName","name","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,yBAAR,GAAoCA,yBAApC;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,yBAAT,CAAmCI,OAAnC,EAA4C;AAC1C,QAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,UAAU,GAAGV,MAAM,CAACW,MAAP,CAAc,IAAd,CAAjB;AACA,SAAO;AACLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,GAAG;AACNJ,QAAAA,cAAc,CAACK,IAAf,CAAoBJ,UAApB;AACAA,QAAAA,UAAU,GAAGV,MAAM,CAACW,MAAP,CAAc,IAAd,CAAb;AACD,OAJU;;AAMXI,MAAAA,KAAK,GAAG;AACN,cAAMC,cAAc,GAAGP,cAAc,CAACQ,GAAf,EAAvB;AACAD,QAAAA,cAAc,IAAI,CAAC,GAAGX,UAAU,CAACa,SAAf,EAA0B,KAA1B,CAAlB;AACAR,QAAAA,UAAU,GAAGM,cAAb;AACD;;AAVU,KADR;;AAcLG,IAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,YAAMC,SAAS,GAAGD,IAAI,CAACE,IAAL,CAAUnB,KAA5B;;AAEA,UAAIO,UAAU,CAACW,SAAD,CAAd,EAA2B;AACzBb,QAAAA,OAAO,CAACe,WAAR,CACE,IAAIhB,aAAa,CAACiB,YAAlB,CACG,4CAA2CH,SAAU,IADxD,EAEE;AACEI,UAAAA,KAAK,EAAE,CAACf,UAAU,CAACW,SAAD,CAAX,EAAwBD,IAAI,CAACE,IAA7B;AADT,SAFF,CADF;AAQD,OATD,MASO;AACLZ,QAAAA,UAAU,CAACW,SAAD,CAAV,GAAwBD,IAAI,CAACE,IAA7B;AACD;AACF;;AA7BI,GAAP;AA+BD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueInputFieldNamesRule = UniqueInputFieldNamesRule;\n\nvar _invariant = require('../../jsutils/invariant.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nfunction UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || (0, _invariant.invariant)(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}