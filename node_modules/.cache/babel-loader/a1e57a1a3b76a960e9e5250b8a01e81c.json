{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _predicates = require('../../language/predicates.js');\n\nvar _directives = require('../../type/directives.js');\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\n\n\nfunction UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (node.kind === _kinds.Kind.SCHEMA_DEFINITION || node.kind === _kinds.Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if ((0, _predicates.isTypeDefinitionNode)(node) || (0, _predicates.isTypeExtensionNode)(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new _GraphQLError.GraphQLError(`The directive \"@${directiveName}\" can only be used once at this location.`, {\n              nodes: [seenDirectives[directiveName], directive]\n            }));\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.js"],"names":["Object","defineProperty","exports","value","UniqueDirectivesPerLocationRule","_GraphQLError","require","_kinds","_predicates","_directives","context","uniqueDirectiveMap","create","schema","getSchema","definedDirectives","getDirectives","specifiedDirectives","directive","name","isRepeatable","astDefinitions","getDocument","definitions","def","kind","Kind","DIRECTIVE_DEFINITION","repeatable","schemaDirectives","typeDirectivesMap","enter","node","directives","seenDirectives","SCHEMA_DEFINITION","SCHEMA_EXTENSION","isTypeDefinitionNode","isTypeExtensionNode","typeName","undefined","directiveName","reportError","GraphQLError","nodes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueDirectivesPerLocationRule = UniqueDirectivesPerLocationRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\nvar _kinds = require('../../language/kinds.js');\n\nvar _predicates = require('../../language/predicates.js');\n\nvar _directives = require('../../type/directives.js');\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nfunction UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : _directives.specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === _kinds.Kind.SCHEMA_DEFINITION ||\n        node.kind === _kinds.Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (\n        (0, _predicates.isTypeDefinitionNode)(node) ||\n        (0, _predicates.isTypeExtensionNode)(node)\n      ) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}