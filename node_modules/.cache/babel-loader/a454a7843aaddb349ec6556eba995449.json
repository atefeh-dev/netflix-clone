{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;\n\nvar _invariant = require('../../../jsutils/invariant.js');\n\nvar _GraphQLError = require('../../../error/GraphQLError.js');\n\nvar _definition = require('../../../type/definition.js');\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\n\n\nfunction NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || (0, _invariant.invariant)(false);\n        context.reportError(new _GraphQLError.GraphQLError(`The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`, {\n          nodes: node\n        }));\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new _GraphQLError.GraphQLError(`Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, {\n            nodes: node\n          }));\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || (0, _invariant.invariant)(false);\n          context.reportError(new _GraphQLError.GraphQLError(`Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`, {\n            nodes: node\n          }));\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = (0, _definition.getNamedType)(context.getParentInputType());\n\n      if ((0, _definition.isInputObjectType)(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new _GraphQLError.GraphQLError(`The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`, {\n            nodes: node\n          }));\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = (0, _definition.getNamedType)(context.getInputType());\n        enumTypeDef != null || (0, _invariant.invariant)(false);\n        context.reportError(new _GraphQLError.GraphQLError(`The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`, {\n          nodes: node\n        }));\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js"],"names":["Object","defineProperty","exports","value","NoDeprecatedCustomRule","_invariant","require","_GraphQLError","_definition","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","invariant","reportError","GraphQLError","name","nodes","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getNamedType","getParentInputType","isInputObjectType","inputFieldDef","getFields","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoDeprecatedCustomRule = NoDeprecatedCustomRule;\n\nvar _invariant = require('../../../jsutils/invariant.js');\n\nvar _GraphQLError = require('../../../error/GraphQLError.js');\n\nvar _definition = require('../../../type/definition.js');\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nfunction NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || (0, _invariant.invariant)(false);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) ||\n            (0, _invariant.invariant)(false);\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = (0, _definition.getNamedType)(\n        context.getParentInputType(),\n      );\n\n      if ((0, _definition.isInputObjectType)(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new _GraphQLError.GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = (0, _definition.getNamedType)(\n          context.getInputType(),\n        );\n        enumTypeDef != null || (0, _invariant.invariant)(false);\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}