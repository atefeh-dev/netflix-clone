{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _devAssert = require('./jsutils/devAssert.js');\n\nvar _isPromise = require('./jsutils/isPromise.js');\n\nvar _parser = require('./language/parser.js');\n\nvar _validate = require('./type/validate.js');\n\nvar _validate2 = require('./validation/validate.js');\n\nvar _execute = require('./execution/execute.js');\n\nfunction graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise(resolve => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\n\nfunction graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = (0, _validate.validateSchema)(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  let document;\n\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  const validationErrors = (0, _validate2.validate)(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return (0, _execute.execute)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver\n  });\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/graphql.js"],"names":["Object","defineProperty","exports","value","graphql","graphqlSync","_devAssert","require","_isPromise","_parser","_validate","_validate2","_execute","args","Promise","resolve","graphqlImpl","result","isPromise","Error","arguments","length","devAssert","schema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","schemaValidationErrors","validateSchema","errors","document","parse","syntaxError","validationErrors","validate","execute"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,wBAAD,CAAxB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAAxB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAII,UAAU,GAAGJ,OAAO,CAAC,0BAAD,CAAxB;;AAEA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,wBAAD,CAAtB;;AAEA,SAASH,OAAT,CAAiBS,IAAjB,EAAuB;AACrB;AACA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAACC,WAAW,CAACH,IAAD,CAAZ,CAAhC,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASR,WAAT,CAAqBQ,IAArB,EAA2B;AACzB,QAAMI,MAAM,GAAGD,WAAW,CAACH,IAAD,CAA1B,CADyB,CACS;;AAElC,MAAI,CAAC,GAAGL,UAAU,CAACU,SAAf,EAA0BD,MAA1B,CAAJ,EAAuC;AACrC,UAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,SAAOF,MAAP;AACD;;AAED,SAASD,WAAT,CAAqBH,IAArB,EAA2B;AACzB;AACAO,EAAAA,SAAS,CAACC,MAAV,GAAmB,CAAnB,IACE,CAAC,GAAGf,UAAU,CAACgB,SAAf,EACE,KADF,EAEE,qGAFF,CADF;AAKA,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,aANI;AAOJC,IAAAA,aAPI;AAQJC,IAAAA;AARI,MASFjB,IATJ,CAPyB,CAgBf;;AAEV,QAAMkB,sBAAsB,GAAG,CAAC,GAAGrB,SAAS,CAACsB,cAAd,EAA8BT,MAA9B,CAA/B;;AAEA,MAAIQ,sBAAsB,CAACV,MAAvB,GAAgC,CAApC,EAAuC;AACrC,WAAO;AACLY,MAAAA,MAAM,EAAEF;AADH,KAAP;AAGD,GAxBwB,CAwBvB;;;AAEF,MAAIG,QAAJ;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,CAAC,GAAGzB,OAAO,CAAC0B,KAAZ,EAAmBX,MAAnB,CAAX;AACD,GAFD,CAEE,OAAOY,WAAP,EAAoB;AACpB,WAAO;AACLH,MAAAA,MAAM,EAAE,CAACG,WAAD;AADH,KAAP;AAGD,GAlCwB,CAkCvB;;;AAEF,QAAMC,gBAAgB,GAAG,CAAC,GAAG1B,UAAU,CAAC2B,QAAf,EAAyBf,MAAzB,EAAiCW,QAAjC,CAAzB;;AAEA,MAAIG,gBAAgB,CAAChB,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,WAAO;AACLY,MAAAA,MAAM,EAAEI;AADH,KAAP;AAGD,GA1CwB,CA0CvB;;;AAEF,SAAO,CAAC,GAAGzB,QAAQ,CAAC2B,OAAb,EAAsB;AAC3BhB,IAAAA,MAD2B;AAE3BW,IAAAA,QAF2B;AAG3BT,IAAAA,SAH2B;AAI3BC,IAAAA,YAJ2B;AAK3BC,IAAAA,cAL2B;AAM3BC,IAAAA,aAN2B;AAO3BC,IAAAA,aAP2B;AAQ3BC,IAAAA;AAR2B,GAAtB,CAAP;AAUD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.graphql = graphql;\nexports.graphqlSync = graphqlSync;\n\nvar _devAssert = require('./jsutils/devAssert.js');\n\nvar _isPromise = require('./jsutils/isPromise.js');\n\nvar _parser = require('./language/parser.js');\n\nvar _validate = require('./type/validate.js');\n\nvar _validate2 = require('./validation/validate.js');\n\nvar _execute = require('./execution/execute.js');\n\nfunction graphql(args) {\n  // Always return a Promise for a consistent API.\n  return new Promise((resolve) => resolve(graphqlImpl(args)));\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nfunction graphqlSync(args) {\n  const result = graphqlImpl(args); // Assert that the execution was synchronous.\n\n  if ((0, _isPromise.isPromise)(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    source,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  } = args; // Validate Schema\n\n  const schemaValidationErrors = (0, _validate.validateSchema)(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors,\n    };\n  } // Parse\n\n  let document;\n\n  try {\n    document = (0, _parser.parse)(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError],\n    };\n  } // Validate\n\n  const validationErrors = (0, _validate2.validate)(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors,\n    };\n  } // Execute\n\n  return (0, _execute.execute)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n  });\n}\n"]},"metadata":{},"sourceType":"script"}