{"ast":null,"code":"var _jsxFileName = \"/home/atefeh/Documents/my-project/netflix/src/index.js\";\n\n/** @format */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloLink } from \"apollo-link\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nconst customFetch = (uri, options) => {\n  return fetch(uri, { ...options,\n    headers: { ...options.headers,\n      \"x-custom-header\": process.env.ASTRA_DB_APPLICATION_TOKEN\n    }\n  });\n};\n\nconst fetchLink = createHttpLink({\n  uri: process.env.ASTRA_GRAPHQL_ENDPOINT,\n  fetch: customFetch\n});\nconst client = new ApolloClient({\n  link: ApolloLink.from([fetchLink]),\n  cache: new InMemoryCache()\n});\n\nconst Main = () => /*#__PURE__*/_jsxDEV(BrowserRouter, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 3\n}, this);\n\n_c = Main;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/src/index.js"],"names":["React","ReactDOM","Provider","App","createStore","applyMiddleware","compose","thunk","reducers","ApolloClient","ApolloProvider","InMemoryCache","BrowserRouter","createHttpLink","ApolloLink","store","customFetch","uri","options","fetch","headers","process","env","ASTRA_DB_APPLICATION_TOKEN","fetchLink","ASTRA_GRAPHQL_ENDPOINT","client","link","from","cache","Main","render","document","querySelector"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,QAA4D,gBAA5D;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,MAAMC,KAAK,GAAGX,WAAW,CAACI,QAAD,EAAWF,OAAO,CAACD,eAAe,CAACE,KAAD,CAAhB,CAAlB,CAAzB;;AAEA,MAAMS,WAAW,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACpC,SAAOC,KAAK,CAACF,GAAD,EAAM,EAChB,GAAGC,OADa;AAEhBE,IAAAA,OAAO,EAAE,EACP,GAAGF,OAAO,CAACE,OADJ;AAEP,yBAAmBC,OAAO,CAACC,GAAR,CAAYC;AAFxB;AAFO,GAAN,CAAZ;AAOD,CARD;;AAUA,MAAMC,SAAS,GAAGX,cAAc,CAAC;AAC/BI,EAAAA,GAAG,EAAEI,OAAO,CAACC,GAAR,CAAYG,sBADc;AAE/BN,EAAAA,KAAK,EAAEH;AAFwB,CAAD,CAAhC;AAKA,MAAMU,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BkB,EAAAA,IAAI,EAAEb,UAAU,CAACc,IAAX,CAAgB,CAACJ,SAAD,CAAhB,CADwB;AAE9BK,EAAAA,KAAK,EAAE,IAAIlB,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,MAAMmB,IAAI,GAAG,mBACX,QAAC,aAAD;AAAA,yBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEX,KAAjB;AAAA,6BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMe,I;AAUN7B,QAAQ,CAAC8B,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0BC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAA1B","sourcesContent":["/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./store/reducers\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloLink } from \"apollo-link\";\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nconst customFetch = (uri, options) => {\n  return fetch(uri, {\n    ...options,\n    headers: {\n      ...options.headers,\n      \"x-custom-header\": process.env.ASTRA_DB_APPLICATION_TOKEN,\n    },\n  });\n};\n\nconst fetchLink = createHttpLink({\n  uri: process.env.ASTRA_GRAPHQL_ENDPOINT,\n  fetch: customFetch,\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([fetchLink]),\n  cache: new InMemoryCache(),\n});\n\nconst Main = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nReactDOM.render(<Main />, document.querySelector(\"#root\"));\n"]},"metadata":{},"sourceType":"module"}