{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _naturalCompare = require('../jsutils/naturalCompare.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _schema = require('../type/schema.js');\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\n\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(sortByName(schemaConfig.types), type => type.name, sortNamedType);\n  return new _schema.GraphQLSchema({ ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  });\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({ ...config,\n      locations: sortBy(config.locations, x => x),\n      args: sortArgs(config.args)\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, arg => ({ ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args)\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, field => ({ ...field,\n      type: replaceType(field.type)\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {\n      return type;\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({ ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields)\n      });\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({ ...config,\n        types: () => sortTypes(config.types)\n      });\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({ ...config,\n        values: sortObjMap(config.values, value => value)\n      });\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({ ...config,\n        fields: () => sortInputFields(config.fields)\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n\n    false || (0, _invariant.invariant)(false, 'Unexpected type: ' + (0, _inspect.inspect)(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, obj => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/utilities/lexicographicSortSchema.js"],"names":["Object","defineProperty","exports","value","lexicographicSortSchema","_inspect","require","_invariant","_keyValMap","_naturalCompare","_definition","_directives","_introspection","_schema","schema","schemaConfig","toConfig","typeMap","keyValMap","sortByName","types","type","name","sortNamedType","GraphQLSchema","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","replaceNamedType","maybeType","directive","config","GraphQLDirective","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","isScalarType","isIntrospectionType","isObjectType","GraphQLObjectType","interfaces","fields","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isEnumType","GraphQLEnumType","isInputObjectType","GraphQLInputObjectType","invariant","inspect","sortValueFn","sortedMap","create","key","keys","sort","naturalCompare","obj","mapToKey","slice","obj1","obj2","key1","key2"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.lexicographicSortSchema = lexicographicSortSchema;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _naturalCompare = require('../jsutils/naturalCompare.js');\n\nvar _definition = require('../type/definition.js');\n\nvar _directives = require('../type/directives.js');\n\nvar _introspection = require('../type/introspection.js');\n\nvar _schema = require('../type/schema.js');\n\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\nfunction lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = (0, _keyValMap.keyValMap)(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new _schema.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if ((0, _definition.isListType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLList(replaceType(type.ofType));\n    } else if ((0, _definition.isNonNullType)(type)) {\n      // @ts-expect-error\n      return new _definition.GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new _directives.GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (\n      (0, _definition.isScalarType)(type) ||\n      (0, _introspection.isIntrospectionType)(type)\n    ) {\n      return type;\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if ((0, _definition.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if ((0, _definition.isEnumType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if ((0, _definition.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new _definition.GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false ||\n      (0, _invariant.invariant)(\n        false,\n        'Unexpected type: ' + (0, _inspect.inspect)(type),\n      );\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(_naturalCompare.naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return (0, _naturalCompare.naturalCompare)(key1, key2);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}