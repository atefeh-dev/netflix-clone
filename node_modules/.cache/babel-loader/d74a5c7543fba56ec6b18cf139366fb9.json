{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\n\n\nfunction UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    const argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];\n    const seenArgs = (0, _groupBy.groupBy)(argumentNodes, arg => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(new _GraphQLError.GraphQLError(`There can be only one argument named \"${argName}\".`, {\n          nodes: argNodes.map(node => node.name)\n        }));\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueArgumentNamesRule","_groupBy","require","_GraphQLError","context","Field","checkArgUniqueness","Directive","parentNode","_parentNode$arguments","argumentNodes","arguments","seenArgs","groupBy","arg","name","argName","argNodes","length","reportError","GraphQLError","nodes","map","node"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AAEA,IAAIC,aAAa,GAAGD,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,uBAAT,CAAiCI,OAAjC,EAA0C;AACxC,SAAO;AACLC,IAAAA,KAAK,EAAEC,kBADF;AAELC,IAAAA,SAAS,EAAED;AAFN,GAAP;;AAKA,WAASA,kBAAT,CAA4BE,UAA5B,EAAwC;AACtC,QAAIC,qBAAJ,CADsC,CAGtC;;AAEA;;;AACA,UAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,UAAU,CAACG,SAApC,MAAmD,IAAnD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,UAAMG,QAAQ,GAAG,CAAC,GAAGX,QAAQ,CAACY,OAAb,EACfH,aADe,EAEdI,GAAD,IAASA,GAAG,CAACC,IAAJ,CAAShB,KAFH,CAAjB;;AAKA,SAAK,MAAM,CAACiB,OAAD,EAAUC,QAAV,CAAX,IAAkCL,QAAlC,EAA4C;AAC1C,UAAIK,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBd,QAAAA,OAAO,CAACe,WAAR,CACE,IAAIhB,aAAa,CAACiB,YAAlB,CACG,yCAAwCJ,OAAQ,IADnD,EAEE;AACEK,UAAAA,KAAK,EAAEJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAUA,IAAI,CAACR,IAA5B;AADT,SAFF,CADF;AAQD;AACF;AACF;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueArgumentNamesRule = UniqueArgumentNamesRule;\n\nvar _groupBy = require('../../jsutils/groupBy.js');\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nfunction UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = (0, _groupBy.groupBy)(\n      argumentNodes,\n      (arg) => arg.name.value,\n    );\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new _GraphQLError.GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}