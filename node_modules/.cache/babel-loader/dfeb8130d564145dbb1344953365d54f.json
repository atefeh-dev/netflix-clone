{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.getLocation = getLocation;\n\nvar _invariant = require('../jsutils/invariant.js');\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n\nfunction getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || (0, _invariant.invariant)(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/language/location.js"],"names":["Object","defineProperty","exports","value","getLocation","_invariant","require","LineRegExp","source","position","lastLineStart","line","match","body","matchAll","index","invariant","length","column"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,MAAMC,UAAU,GAAG,cAAnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,SAASH,WAAT,CAAqBI,MAArB,EAA6BC,QAA7B,EAAuC;AACrC,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,OAAK,MAAMC,KAAX,IAAoBJ,MAAM,CAACK,IAAP,CAAYC,QAAZ,CAAqBP,UAArB,CAApB,EAAsD;AACpD,WAAOK,KAAK,CAACG,KAAb,KAAuB,QAAvB,IAAmC,CAAC,GAAGV,UAAU,CAACW,SAAf,EAA0B,KAA1B,CAAnC;;AAEA,QAAIJ,KAAK,CAACG,KAAN,IAAeN,QAAnB,EAA6B;AAC3B;AACD;;AAEDC,IAAAA,aAAa,GAAGE,KAAK,CAACG,KAAN,GAAcH,KAAK,CAAC,CAAD,CAAL,CAASK,MAAvC;AACAN,IAAAA,IAAI,IAAI,CAAR;AACD;;AAED,SAAO;AACLA,IAAAA,IADK;AAELO,IAAAA,MAAM,EAAET,QAAQ,GAAG,CAAX,GAAeC;AAFlB,GAAP;AAID","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.getLocation = getLocation;\n\nvar _invariant = require('../jsutils/invariant.js');\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nfunction getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || (0, _invariant.invariant)(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}