{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.NoUnusedVariablesRule = NoUnusedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\n\n\nfunction NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new _GraphQLError.GraphQLError(operation.name ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".` : `Variable \"$${variableName}\" is never used.`, {\n              nodes: variableDef\n            }));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/NoUnusedVariablesRule.js"],"names":["Object","defineProperty","exports","value","NoUnusedVariablesRule","_GraphQLError","require","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","create","usages","getRecursiveVariableUsages","node","name","variableDef","variableName","variable","reportError","GraphQLError","nodes","VariableDefinition","def","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,qBAAR,GAAgCA,qBAAhC;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,qBAAT,CAA+BG,OAA/B,EAAwC;AACtC,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KAAK,GAAG;AACNF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;;AAKnBG,MAAAA,KAAK,CAACC,SAAD,EAAY;AACf,cAAMC,gBAAgB,GAAGb,MAAM,CAACc,MAAP,CAAc,IAAd,CAAzB;AACA,cAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCJ,SAAnC,CAAf;;AAEA,aAAK,MAAM;AAAEK,UAAAA;AAAF,SAAX,IAAuBF,MAAvB,EAA+B;AAC7BF,UAAAA,gBAAgB,CAACI,IAAI,CAACC,IAAL,CAAUf,KAAX,CAAhB,GAAoC,IAApC;AACD;;AAED,aAAK,MAAMgB,WAAX,IAA0BX,YAA1B,EAAwC;AACtC,gBAAMY,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBH,IAArB,CAA0Bf,KAA/C;;AAEA,cAAIU,gBAAgB,CAACO,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3Cb,YAAAA,OAAO,CAACe,WAAR,CACE,IAAIjB,aAAa,CAACkB,YAAlB,CACEX,SAAS,CAACM,IAAV,GACK,cAAaE,YAAa,iCAAgCR,SAAS,CAACM,IAAV,CAAef,KAAM,IADpF,GAEK,cAAaiB,YAAa,kBAHjC,EAIE;AACEI,cAAAA,KAAK,EAAEL;AADT,aAJF,CADF;AAUD;AACF;AACF;;AA7BkB,KADhB;;AAiCLM,IAAAA,kBAAkB,CAACC,GAAD,EAAM;AACtBlB,MAAAA,YAAY,CAACmB,IAAb,CAAkBD,GAAlB;AACD;;AAnCI,GAAP;AAqCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.NoUnusedVariablesRule = NoUnusedVariablesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nfunction NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new _GraphQLError.GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}