{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.UniqueTypeNamesRule = UniqueTypeNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\n\n\nfunction UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(new _GraphQLError.GraphQLError(`Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`, {\n        nodes: node.name\n      }));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new _GraphQLError.GraphQLError(`There can be only one type named \"${typeName}\".`, {\n        nodes: [knownTypeNames[typeName], node.name]\n      }));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/validation/rules/UniqueTypeNamesRule.js"],"names":["Object","defineProperty","exports","value","UniqueTypeNamesRule","_GraphQLError","require","context","knownTypeNames","create","schema","getSchema","ScalarTypeDefinition","checkTypeName","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","node","typeName","name","getType","reportError","GraphQLError","nodes"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,6BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASF,mBAAT,CAA6BG,OAA7B,EAAsC;AACpC,QAAMC,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAc,IAAd,CAAvB;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,SAAR,EAAf;AACA,SAAO;AACLC,IAAAA,oBAAoB,EAAEC,aADjB;AAELC,IAAAA,oBAAoB,EAAED,aAFjB;AAGLE,IAAAA,uBAAuB,EAAEF,aAHpB;AAILG,IAAAA,mBAAmB,EAAEH,aAJhB;AAKLI,IAAAA,kBAAkB,EAAEJ,aALf;AAMLK,IAAAA,yBAAyB,EAAEL;AANtB,GAAP;;AASA,WAASA,aAAT,CAAuBM,IAAvB,EAA6B;AAC3B,UAAMC,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAUlB,KAA3B;;AAEA,QAAIO,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACY,OAAP,CAAeF,QAAf,CAA5C,EAAsE;AACpEb,MAAAA,OAAO,CAACgB,WAAR,CACE,IAAIlB,aAAa,CAACmB,YAAlB,CACG,SAAQJ,QAAS,oFADpB,EAEE;AACEK,QAAAA,KAAK,EAAEN,IAAI,CAACE;AADd,OAFF,CADF;AAQA;AACD;;AAED,QAAIb,cAAc,CAACY,QAAD,CAAlB,EAA8B;AAC5Bb,MAAAA,OAAO,CAACgB,WAAR,CACE,IAAIlB,aAAa,CAACmB,YAAlB,CACG,qCAAoCJ,QAAS,IADhD,EAEE;AACEK,QAAAA,KAAK,EAAE,CAACjB,cAAc,CAACY,QAAD,CAAf,EAA2BD,IAAI,CAACE,IAAhC;AADT,OAFF,CADF;AAQD,KATD,MASO;AACLb,MAAAA,cAAc,CAACY,QAAD,CAAd,GAA2BD,IAAI,CAACE,IAAhC;AACD;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.UniqueTypeNamesRule = UniqueTypeNamesRule;\n\nvar _GraphQLError = require('../../error/GraphQLError.js');\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nfunction UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new _GraphQLError.GraphQLError(\n          `There can be only one type named \"${typeName}\".`,\n          {\n            nodes: [knownTypeNames[typeName], node.name],\n          },\n        ),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}