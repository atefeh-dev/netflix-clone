{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _kinds = require('../language/kinds.js');\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\n\nfunction valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case _kinds.Kind.NULL:\n      return null;\n\n    case _kinds.Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case _kinds.Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case _kinds.Kind.STRING:\n    case _kinds.Kind.ENUM:\n    case _kinds.Kind.BOOLEAN:\n      return valueNode.value;\n\n    case _kinds.Kind.LIST:\n      return valueNode.values.map(node => valueFromASTUntyped(node, variables));\n\n    case _kinds.Kind.OBJECT:\n      return (0, _keyValMap.keyValMap)(valueNode.fields, field => field.name.value, field => valueFromASTUntyped(field.value, variables));\n\n    case _kinds.Kind.VARIABLE:\n      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];\n  }\n}","map":{"version":3,"sources":["/home/atefeh/Documents/my-project/netflix/node_modules/graphql/utilities/valueFromASTUntyped.js"],"names":["Object","defineProperty","exports","value","valueFromASTUntyped","_keyValMap","require","_kinds","valueNode","variables","kind","Kind","NULL","INT","parseInt","FLOAT","parseFloat","STRING","ENUM","BOOLEAN","LIST","values","map","node","OBJECT","keyValMap","fields","field","name","VARIABLE"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,sBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,mBAAT,CAA6BI,SAA7B,EAAwCC,SAAxC,EAAmD;AACjD,UAAQD,SAAS,CAACE,IAAlB;AACE,SAAKH,MAAM,CAACI,IAAP,CAAYC,IAAjB;AACE,aAAO,IAAP;;AAEF,SAAKL,MAAM,CAACI,IAAP,CAAYE,GAAjB;AACE,aAAOC,QAAQ,CAACN,SAAS,CAACL,KAAX,EAAkB,EAAlB,CAAf;;AAEF,SAAKI,MAAM,CAACI,IAAP,CAAYI,KAAjB;AACE,aAAOC,UAAU,CAACR,SAAS,CAACL,KAAX,CAAjB;;AAEF,SAAKI,MAAM,CAACI,IAAP,CAAYM,MAAjB;AACA,SAAKV,MAAM,CAACI,IAAP,CAAYO,IAAjB;AACA,SAAKX,MAAM,CAACI,IAAP,CAAYQ,OAAjB;AACE,aAAOX,SAAS,CAACL,KAAjB;;AAEF,SAAKI,MAAM,CAACI,IAAP,CAAYS,IAAjB;AACE,aAAOZ,SAAS,CAACa,MAAV,CAAiBC,GAAjB,CAAsBC,IAAD,IAC1BnB,mBAAmB,CAACmB,IAAD,EAAOd,SAAP,CADd,CAAP;;AAIF,SAAKF,MAAM,CAACI,IAAP,CAAYa,MAAjB;AACE,aAAO,CAAC,GAAGnB,UAAU,CAACoB,SAAf,EACLjB,SAAS,CAACkB,MADL,EAEJC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWzB,KAFjB,EAGJwB,KAAD,IAAWvB,mBAAmB,CAACuB,KAAK,CAACxB,KAAP,EAAcM,SAAd,CAHzB,CAAP;;AAMF,SAAKF,MAAM,CAACI,IAAP,CAAYkB,QAAjB;AACE,aAAOpB,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GACH,KAAK,CADF,GAEHA,SAAS,CAACD,SAAS,CAACoB,IAAV,CAAezB,KAAhB,CAFb;AA5BJ;AAgCD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.valueFromASTUntyped = valueFromASTUntyped;\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _kinds = require('../language/kinds.js');\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nfunction valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case _kinds.Kind.NULL:\n      return null;\n\n    case _kinds.Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case _kinds.Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case _kinds.Kind.STRING:\n    case _kinds.Kind.ENUM:\n    case _kinds.Kind.BOOLEAN:\n      return valueNode.value;\n\n    case _kinds.Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case _kinds.Kind.OBJECT:\n      return (0, _keyValMap.keyValMap)(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case _kinds.Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n"]},"metadata":{},"sourceType":"script"}